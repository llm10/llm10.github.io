{"s":"Gemini","m":"gemini-2.5-flash","t":1752827559,"r":[{"role":"u","text":"rocker switch for a pestwest Mantis Sirius model bug light.  It's a 4 post 250v, 15a that says t100 on it"},{"role":"a","text":"You can find rocker switches with the specifications of 4 posts, 250V, and 15A. Several options are available that meet these electrical requirements.\n\nSome examples include:\n*   High-quality Kcd4 type rocker switches with 4 or 6 pins, rated for 15A 250V AC. These are often used in various electrical appliances.\n*   KCD2-501 ON\/OFF 4-pin rocker switches are available with a 15A 250V AC rating.\n*   General 250V 15A, 2-position, 4-terminal rocker toggle switches are also common.\n*   \"DPST Rocker Toggle Switches\" are listed with a 15A 250V rating and 4 pins.\n*   Manufacturers like Carling Technologies offer a range of rocker switches from 1 to 4 poles, with various illumination and termination options, including models suitable for 15A at 250V.\n\nThe \"T100\" marking on your original switch typically refers to a 100\u00b0C temperature rating, which is a common specification for many electrical components. When selecting a replacement, ensure that the physical dimensions and mounting style of the new switch are compatible with your PestWest Mantis Sirius bug light.","sources":["https:\/\/cncsgk.en.made-in-china.com\/product\/wjnQpxZcfbVO\/China-High-Quality-20A-125V-15A-250V-AC-Kcd4-Red-Rocker-Switch-4-6-Pin.html","https:\/\/www.aliexpress.us\/item\/3256803095395509.html?gatewayAdapt=glo2usa4itemAdapt&_randl_shipto=US","https:\/\/www.ebay.co.uk\/itm\/235877438292","https:\/\/www.walmart.com\/c\/kp\/dpst-rocker-switch","https:\/\/www.carlingtech.com\/rocker-switches","https:\/\/www.google.com\/search?q=4+post+250V+15A+rocker+switch&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"rocker switch for a pestwest Mantis Sirius model bug light.  It's a 4 post 250v, 15a that says t100 on it https:\/\/usercontent.irccloud-cdn.com\/file\/xtXZ920z\/irccloudcapture5136216975410367643.jpg"},{"role":"a","text":"Based on the image and your description, the rocker switch for your PestWest Mantis Sirius bug light has the following specifications:\n\n*   **Manufacturer:** Arcolectric (England)\n*   **Series:** 85.0 Series (Non-illuminated)\n*   **Type:** Rocker Switch, DPST (Double Pole Single Throw) configuration with 4 terminals.\n*   **Voltage Rating:** 250V AC\n*   **Current Rating:** 10(6)A. While you mentioned 15A, the switch clearly indicates 10 Amps for resistive loads and 6 Amps for inductive loads. Some variants of this series might be rated higher for non-inductive loads (e.g., 15A), but the marking on your specific switch is 10(6)A.\n*   **Temperature Rating:** T125, meaning it's rated for an operating temperature of up to 125\u00b0C. You mentioned T100, but the switch itself indicates T125.\n\nTo find a suitable replacement, you should look for an Arcolectric 85.0 series non-illuminated rocker switch with 4 terminals, rated for 250V AC and at least 10(6)A, and a T125 temperature rating.\n\nSeveral online electronics suppliers or industrial component distributors may carry Arcolectric switches or compatible alternatives. You might find replacements by searching for \"Arcolectric 85.0 series rocker switch 4 pin 250V 10A T125\" or a generic \"DPST rocker switch 4 pin 250V 10A T125\". Ensure the physical dimensions and panel cutout size match your existing switch for proper fitment.","sources":["https:\/\/richelectronics.co.uk\/product\/arcolectric-85-0-rocker-switch-dpst-panel-mount-t100-10a-250v-om0585","https:\/\/www.ebay.com\/itm\/225975646925","https:\/\/picclick.com\/ARCOLECTRIC-ENGLAND-853-850-8550VB-Power-Rocker-Switch-263721267221.html","https:\/\/www.swordcrowncaravans.com\/index.php?route=product\/product&product_id=1896","https:\/\/www.rapidonline.com\/arcolectric-h8550xbaaa-rocker-switch-lit-red-dpst-on-off-250v-ac-10-a-50-0980","https:\/\/www.google.com\/search?q=DPST+rocker+switch+4+pin+250V+10A+T125&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"las vegas electronics store shop online"},{"role":"a","text":"Several electronics stores in Las Vegas offer online shopping options:\n\n*   **Kiesub Electronics:** This wholesale electronics distributor, based in Las Vegas since 1972, was one of the first in the industry to have an online electronics store.\n*   **Walmart:** Various Walmart locations in Las Vegas offer electronics and allow for online ordering with in-store pickup.\n*   **Best Buy:** The Best Buy in Las Vegas allows customers to visit their virtual store to live chat, voice call, or video call with product experts. You can also shop popular categories online.\n*   **RC Willey:** While emphasizing a hands-on in-store experience, RC Willey in Las Vegas also offers convenient pickup and local delivery for electronics purchased.","sources":["https:\/\/kiesub.com\/","https:\/\/www.walmart.com\/store\/1838-las-vegas-nv\/electronics","https:\/\/www.walmart.com\/store\/3473-las-vegas-nv","https:\/\/stores.bestbuy.com\/nv\/las-vegas\/10950-w-charleston-blvd-542.html","https:\/\/www.rcwilley.com\/location\/Nevada\/Summerlin\/Electronics","https:\/\/www.google.com\/search?q=electronics+store+Las+Vegas+shop+online&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"you mean like the H8550VBACA ?"},{"role":"a","text":"Yes, the Arcolectric H8550VBACA is a strong candidate for a replacement rocker switch based on the specifications you provided and the image of your original switch.\n\nHere's why:\n*   **Manufacturer\/Series:** It is an Arcolectric (now Bulgin) 8500 series switch, which aligns with the visible \"85.0\" on your original switch.\n*   **Configuration:** It is a DPST (Double Pole Single Throw) On-Off switch with 4 quick-connect terminals, matching your description of a \"4 post\" switch.\n*   **Voltage Rating:** It is rated for 250V AC, matching your requirement.\n*   **Current Rating:** The H8550VBACA specifically has a 15A AC contact current rating, which matches the 15A you initially mentioned. While your image showed 10(6)A, the 8500 series does include 15A rated variants.\n*   **Illumination:** It is a non-illuminated switch, consistent with the image.\n*   **Mounting:** It's a panel-mount snap-in type, designed for standard cut-out dimensions (approximately 19.3 x 12.9 mm or 19.8 x 12.9 mm) which should be compatible.\n\nWhile the original switch in your image was marked \"T125\" for temperature rating and \"10(6)A\" for current, the H8550VBACA is part of the same series and is rated for 15A, which you specified as your desired current. When purchasing, ensure the physical dimensions and mounting method are an exact match for your bug light.","sources":["https:\/\/canada.newark.com\/arcolectric\/h8550vbaca\/switch-rocker-dpst-15a-277v-clear\/dp\/06WX0657","https:\/\/cpc.farnell.com\/arcolectric\/h8550vbaca\/rocker-switch-dpst-black-white\/dp\/SW04095","https:\/\/uk.rs-online.com\/web\/p\/rocker-switches\/2284581","https:\/\/my.element14.com\/arcolectric-bulgin-limited\/h8550vbaca\/switch-dpst-10a-250vac-black-i\/dp\/273200","https:\/\/www.halltronics.com\/product\/rocker-switches\/HT16915\/h8550vbaca","https:\/\/www.google.com\/search?q=Arcolectric+H8550VBACA+datasheet&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"are there products very similar to H8550VBACA that meet the specs, or is it just perfect"},{"role":"a","text":"The Arcolectric H8550VBACA is indeed a very suitable and likely perfect match, as it is part of the original series (8500) and meets the 15A, 250V, 4-pin, DPST, non-illuminated specifications. It also has the correct panel cut-out size for the series.\n\nHowever, the H8550VBACA is not the *only* option. There are very similar products from other manufacturers or generic \"KCD\" series switches that meet these common specifications.\n\nHere are examples of very similar products that meet your specs:\n\n*   **KCD4 Series Rocker Switches:** Many generic KCD4 type rocker switches are available with 4 pins (DPST), rated for 15A 250V AC, and a T125 temperature rating. These are widely used in various appliances and industrial control systems. They often feature similar snap-in panel mounting. It's important to check the exact panel cut-out dimensions for KCD4 switches, as they can vary (e.g., 28x21mm vs. 19.3x12.9mm for the Arcolectric 8500 series).\n*   **Other 15A\/250V DPST Rocker Switches:** Various manufacturers produce standard DPST rocker switches with 4 terminals that can handle 15A at 250V AC. These are common for applications like power tools, household appliances, and control panels. When selecting these, ensure the \"T\" temperature rating (T100 or T125) and the physical dimensions (panel cutout, overall size) match your existing switch.\n\nWhile the Arcolectric H8550VBACA is an excellent choice due to its direct lineage, if it's unavailable or cost-prohibitive, many \"KCD4\" style or other generic DPST 15A 250V 4-pin rocker switches with a T125 temperature rating could serve as functional equivalents, provided their physical dimensions and mounting method are compatible.","sources":["https:\/\/cpc.farnell.com\/arcolectric\/h8550vbaca\/rocker-switch-dpst-black-white\/dp\/SW04095","https:\/\/www.newark.com\/arcolectric-bulgin-limited\/h8550xbaaa\/rocker-sw-dpst-15a-250vac-panel\/dp\/40AH4949","https:\/\/mt.rsdelivers.com\/product\/arcolectric-bulgin-ltd\/h8550vbaca\/arcolectric-bulgin-ltd-dpst-on-off-rocker-switch\/2284581","https:\/\/www.ebay.com\/itm\/226854691866","https:\/\/www.google.com\/search?q=DPST+rocker+switch+15A+250V+4+pin+T125&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"what are the common KCD types"},{"role":"a","text":"The \"KCD\" designation refers to a very common and widely manufactured family of rocker switches, often found in a variety of electronic appliances, power strips, and industrial equipment. They are generally characterized by their snap-in panel mounting and basic on\/off or momentary functions.\n\nThe most common KCD types are primarily categorized by their **pole and throw configurations** and **number of pins (terminals)**:\n\n1.  **KCD1 Series (often KCD1-10X):**\n    *   **Configuration:** SPST (Single Pole, Single Throw)\n    *   **Function:** Simple ON-OFF (2-position)\n    *   **Pins:** 2 pins (terminals)\n    *   **Common Use:** Basic power switches for lights, small appliances.\n\n2.  **KCD2 Series (often KCD2-20X):**\n    *   **Configuration:** DPST (Double Pole, Single Throw)\n    *   **Function:** ON-OFF (2-position)\n    *   **Pins:** 4 pins (terminals)\n    *   **Common Use:** Switching both live and neutral lines simultaneously, or two separate circuits with one switch. This is often what people refer to when they need a \"4-post\" ON-OFF switch like the one you're replacing.\n\n3.  **KCD3 Series (often KCD3-10X):**\n    *   **Configuration:** SPDT (Single Pole, Double Throw)\n    *   **Function:** ON-OFF-ON or ON-(OFF)-ON (3-position, center-off often available)\n    *   **Pins:** 3 pins (terminals)\n    *   **Common Use:** Selecting between two different circuits, reversing motor direction (with external wiring), or basic 3-way switching.\n\n4.  **KCD4 Series (often KCD4-20X):**\n    *   **Configuration:** DPDT (Double Pole, Double Throw)\n    *   **Function:** ON-OFF-ON or ON-(OFF)-ON (3-position, center-off often available)\n    *   **Pins:** 6 pins (terminals)\n    *   **Common Use:** More complex switching, such as reversing the polarity of a DC motor, or controlling two independent circuits with a single 3-position switch.\n\n**Beyond these core types, KCD switches can also vary by:**\n\n*   **Illumination:** Available with or without internal LEDs\/neon lamps to indicate power status (e.g., illuminated red, green, blue).\n*   **Current\/Voltage Ratings:** Common ratings include 6A\/250V, 10A\/125V, 15A\/250V, 20A\/125V, etc.\n*   **Temperature Rating:** \"T\" ratings like T85, T100, T125, indicating the maximum ambient operating temperature.\n*   **Actuator Style:** Different rocker shapes, colors, or markings (e.g., \"I O\" for On\/Off).\n*   **Panel Cutout Size:** While generally similar within a series, there can be slight variations requiring careful measurement.\n\nWhen searching for a replacement, knowing the **configuration (SPST, DPST, SPDT, DPDT), pin count, and electrical ratings** are the most crucial factors, followed by physical dimensions and any illumination requirements."},{"role":"u","text":"i looked at images and KCD4 were not all the same size. whats the point of saying KCD4 if it aint uniform"},{"role":"a","text":"You've hit on a very important point about the \"KCD\" designation! You're absolutely right that KCD4 switches are not all the same size, even though they share the same general classification.\n\nThe \"KCD\" designation, including KCD4, is not a specific brand or a single, standardized model with fixed dimensions like a part number from a particular manufacturer (e.g., the Arcolectric H8550VBACA). Instead, it's a **generic industry term or a de facto standard** that describes a common *type* of rocker switch.\n\nHere's why they aren't uniform in size:\n\n1.  **Multiple Manufacturers:** Hundreds of different factories, especially in Asia, produce switches that fall under the \"KCD\" umbrella. Each manufacturer might have slightly different molds, tooling, and design variations, leading to minor differences in dimensions.\n2.  **Variations within Series:** Even a single manufacturer might produce several \"KCD4\" types with different physical sizes to accommodate varying current ratings, internal components, or aesthetic preferences. For instance, a KCD4 rated for 20A might be physically larger than one rated for 10A, even if both are DPST 4-pin.\n3.  **No Governing Standard Body:** Unlike some highly standardized components, there isn't a strict international or industry body dictating the exact dimensions for every \"KCD\" type switch. It's more about a common form factor that many manufacturers adopt.\n4.  **Panel Cutout Variations:** The most critical dimension for a snap-in switch is the **panel cutout size** (the hole it snaps into). While there are common cutout sizes (e.g., roughly 19mm x 13mm, or 28mm x 21mm for larger ones), even within those, slight variations of a millimeter or two can make a difference in fit.\n\n**The \"point\" of saying KCD4 is to convey the electrical configuration and general form factor:**\n\n*   **KCD4 = DPST (Double Pole, Single Throw) with 4 pins.** This tells you how the switch functions electrically (an ON-OFF switch that can control two separate circuits or both sides of a single circuit).\n*   It also implies a **snap-in rocker switch** with a rectangular body, a very common style.\n\nSo, while \"KCD4\" narrows down the functional type of switch, **you still need to verify the exact physical dimensions (especially the panel cutout)** when purchasing a replacement to ensure a proper fit. It's a starting point for a search, not a guarantee of dimensional compatibility."}]}