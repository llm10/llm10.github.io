{"s":"gemini","r":[["u","t","whats that crazy fast metal song with the guy covered in tattoos and a big cgi thing in the city"],["a","t","That sounds like the music video for the song **\"Walk\" by Pantera**.\n\nIt features vocalist Phil Anselmo, who is heavily tattooed, and the video includes a large CGI creature stomping through a city."],["u","t","no it's new like 2023+ and the tattoos cover almost everything"],["a","t","Based on your description \u2013 a crazy fast metal song from 2023 or later, featuring a heavily tattooed guy and a big CGI thing in a city \u2013 you are most likely thinking of **Lorna Shore** and their music video for **\"Pain Remains III: In a Sea of Fire\"**.\n\nHere's why it fits:\n\n*   **Release Date:** While the album *Pain Remains* came out in late 2022, the music video for the third part of the title track trilogy was released around the same time and gained massive popularity throughout 2023.\n*   **Crazy Fast Metal:** Lorna Shore plays deathcore, which is known for its extreme speed, blast beats, and heavy breakdowns.\n*   **Guy Covered in Tattoos:** Their vocalist, Will Ramos, is extensively tattooed, covering a large portion of his body.\n*   **Big CGI Thing in the City:** The video features a large, abstract, fiery CGI entity or structure appearing over a landscape that includes structures resembling a city or post-apocalyptic urban environment.\n\nThat video and song were very prominent in the metal scene in 2023."],["u","t","whats that crazy fast metal song with the guy covered in tattoos and a music video with cgi in a dark city"],["a","t","Based on your description \u2013 a crazy fast metal song, a heavily tattooed guy, and a music video with CGI in a dark city \u2013 the most likely song is **\"Pain Remains III: In a Sea of Fire\" by Lorna Shore**.\n\nHere's why it fits:\n\n*   **Crazy Fast Metal:** Lorna Shore plays deathcore, known for its extreme speed, blast beats, and intense sound.\n*   **Guy Covered in Tattoos:** Their vocalist, Will Ramos, is extensively tattooed across his body.\n*   **CGI in a Dark City:** The music video features a dark, desolate, somewhat urban or post-apocalyptic landscape with significant CGI elements, including a large, abstract, fiery entity.\n\nThis song and video were very prominent in the metal scene around 2023."],["u","t","no"],["a","t","Okay, if it's not Lorna Shore, let's try a few other possibilities that fit the description of a crazy fast metal song, a heavily tattooed guy, and a music video with CGI in a dark or urban setting, potentially from around 2023 or slightly before but popular then:\n\n1.  **Shadow of Intent - \"Of Fury\"**: This song is fast and heavy (symphonic deathcore). Their vocalist, Ben Duerr, is heavily tattooed. The music video features a dark, ruined, somewhat urban landscape with significant CGI, including a large, abstract entity or structure. This video was popular in 2022\/2023.\n\n2.  **Fit For An Autopsy - \"Pandora\"**: This band plays deathcore\/death metal, often fast. Their vocalist, Joe Badolato, is heavily tattooed. The video has a dark, industrial, urban setting with CGI elements. This song is from their 2022 album.\n\n3.  **Cattle Decapitation - \"Terrasite\"**: This is a fast technical death metal band. Their vocalist, Travis Ryan, is tattooed. The video for the title track \"Terrasite\" (released in 2023) features CGI creatures and destruction in a landscape that could be interpreted as a ruined city or environment.\n\nDo any of those sound like the one you're thinking of?"],["u","t","no"],["a","t","Okay, let's keep trying. Given your description of a crazy fast metal song, a heavily tattooed guy, and a music video with CGI in a dark city, and ruling out the previous suggestions, here are a few more possibilities that might fit, considering bands active around 2020-2024 with those visual elements:\n\n1.  **Bring Me The Horizon - \"Parasite Eve\"**: While maybe not \"crazy fast\" death metal speed throughout, it has very heavy and fast parts. Their vocalist, Oli Sykes, is extensively tattooed. The video features a dark, ruined urban environment with significant CGI elements, including creatures and effects. This came out in 2020 but remained very popular.\n\n2.  **Motionless In White - \"Cyberhex\"**: This song has fast and heavy sections. Their vocalist, Chris Motionless, is heavily tattooed. The music video is set in a dark, futuristic, cyberpunk-style city with a lot of CGI and visual effects. This was released in 2022.\n\n3.  **Distant - \"Exofilth\"**: This is a deathcore band, definitely crazy fast and heavy. Their vocalist, Alan Grnja, is tattooed. The video for \"Exofilth\" (released in 2023) features a dark, desolate, somewhat urban\/ruined landscape with CGI creatures and effects.\n\n4.  **Cattle Decapitation - \"Terrasite\"**: Re-suggesting this one because it fits \"crazy fast\" death metal, tattooed vocalist (Travis Ryan), and the video (released 2023) has CGI creatures causing destruction in what looks like a ruined urban environment.\n\nDo any of these sound like the song and video you remember?"],["u","t","no"],["a","t","Okay, this is proving tricky! Given the rejections, finding a perfect match for *crazy fast metal*, *guy covered in tattoos*, *CGI*, and *dark city* from 2023+ is difficult, as many videos fitting some criteria don't fit others exactly.\n\nLet's try a couple more possibilities, thinking slightly outside the box or re-evaluating common bands:\n\n1.  **Slaughter to Prevail - \"Viking\" or \"Baba Yaga\"**: While \"Viking\" is from 2022 and \"Baba Yaga\" from 2021, they remained hugely popular in 2023. Their vocalist, Alex Terrible, is *extremely* heavily tattooed, including his face. The songs are heavy and have fast\/breakdown parts. The videos aren't strictly \"CGI in a dark city,\" but they feature dark, often industrial or desolate environments with significant visual effects and sometimes large, imposing figures or structures that could be interpreted as CGI elements in a non-traditional \"city\" setting.\n\n2.  **Cattle Decapitation - \"Terrasite\" (Revisited)**: You rejected this, but let's look at the video again. It *is* from 2023, features heavily tattooed Travis Ryan, is crazy fast technical death metal, and the video *definitely* has CGI creatures causing destruction in what looks like a ruined urban\/city environment. It fits the description very closely. Could it be this one, and maybe the \"CGI thing\" or \"city\" looked slightly different than you initially remembered?\n\n3.  **Maybe a band from a slightly different subgenre?** Could it be industrial metal, or something with electronic elements mixed in?\n\nWithout more specific details about the \"CGI thing\" or the look of the \"dark city,\" it's hard to pinpoint.\n\nCould you describe the \"CGI thing\" or the \"dark city\" a bit more? Was the CGI thing a creature, a structure, abstract? What did the city look like?"],["u","t","yes industrial or electronic metal"],["a","t","Okay, that helps narrow it down! If it's industrial or electronic metal, and still fits the description of a crazy fast song, heavily tattooed guy, and a music video with CGI in a dark city, here are some possibilities from around 2023 or slightly before but still popular:\n\n1.  **Motionless In White - \"Cyberhex\"**: This song has industrial and electronic elements, along with heavy, fast parts. Their vocalist, Chris Motionless, is heavily tattooed. The music video is set in a dark, futuristic, cyberpunk-style city and features a lot of CGI and visual effects. This was released in 2022 but remained very popular.\n\n2.  **Bring Me The Horizon - \"DiE4u\" or \"Parasite Eve\"**: Bring Me The Horizon incorporates electronic and industrial sounds. Oli Sykes is extensively tattooed.\n    *   \"DiE4u\" (2021) has a dark, industrial setting with some CGI\/effects.\n    *   \"Parasite Eve\" (2020) has a dark, ruined urban environment with significant CGI elements, including creatures. While slightly older, these were still very relevant in the scene.\n\n3.  **Code Orange - \"Take Shape\"**: This band blends hardcore, industrial, and metal. Their vocalist\/drummer Jami Morgan is tattooed. The video for \"Take Shape\" (released in 2023) features CGI elements and is set in a dark, industrial, somewhat urban environment.\n\n4.  **Distant - \"Exofilth\"**: While primarily deathcore, they incorporate atmospheric and sometimes industrial-feeling elements. Their vocalist, Alan Grnja, is tattooed. The video for \"Exofilth\" (2023) features a dark, desolate, somewhat urban\/ruined landscape with CGI creatures and effects.\n\nDo any of these sound like the song and video you're thinking of, particularly \"Cyberhex\" or one of the Bring Me The Horizon tracks?"]]}