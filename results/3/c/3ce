{"s":"Gemini","m":"gemini-2.5-flash","t":1759111016,"r":[{"role":"u","text":"true comparison of 4070ti to 5070ti, DLSS hacks aside"},{"role":"a","text":"A direct comparison between the NVIDIA GeForce RTX 4070 Ti and the anticipated NVIDIA GeForce RTX 5070 Ti, without considering DLSS features, reveals the following:\n\n**NVIDIA GeForce RTX 4070 Ti**\n\n*   **Architecture:** Ada Lovelace (AD104 graphics processor)\n*   **CUDA Cores:** 7,680\n*   **Memory:** 12 GB GDDR6X\n*   **Memory Bus:** 192-bit\n*   **Memory Bandwidth:** 504.2 GB\/s\n*   **Memory Speed:** 21 Gbps effective (1313 MHz)\n*   **Boost Clock:** Up to 2610 MHz (some models up to 2760 MHz)\n*   **Ray Tracing Cores:** 60\n*   **TDP (Total Graphics Power):** 285 W\n*   **Release Date:** January 3, 2023\n*   **Launch Price:** $799\n\n**NVIDIA GeForce RTX 5070 Ti (Anticipated\/Rumored)**\n\n*   **Architecture:** Blackwell (GB203 GPU die)\n*   **CUDA Cores:** 8,960\n*   **Memory:** 16 GB GDDR7\n*   **Memory Bus:** 256-bit\n*   **Memory Speed:** 28 Gbps\n*   **Memory Bandwidth:** 896 GB\/s\n*   **Boost Clock:** 2.45 GHz (2450 MHz)\n*   **Ray Tracing Cores:** 70\n*   **Tensor Cores:** 280\n*   **Release Date:** February 20, 2025 (confirmed)\n*   **Launch Price:** $749\n\n**Comparison without DLSS:**\n\nThe RTX 5070 Ti is expected to offer significant hardware improvements over the RTX 4070 Ti. It features a notable increase in CUDA cores (8,960 vs. 7,680), a jump to 16 GB of newer GDDR7 memory from 12 GB GDDR6X, and a wider 256-bit memory bus compared to the 4070 Ti's 192-bit. These memory upgrades result in a substantial increase in memory bandwidth (896 GB\/s vs. 504.2 GB\/s). It also includes more dedicated Ray Tracing Cores (70 vs. 60) and Tensor Cores (280 vs. 240). While one source mentions a generational uplift of up to 2.9x in games for the RTX 5070 Ti, it's important to note this includes the \"full DLSS 4 suite\". A more direct \"DLSS hacks aside\" comparison would focus on the raw core count, memory, and architectural advancements which inherently boost performance. The 5070 Ti is also launching at a slightly lower price point ($749) than the 4070 Ti's launch price ($799).","sources":["https:\/\/www.techpowerup.com\/gpu-specs\/geforce-rtx-4070-ti.c3950","https:\/\/www.notebookcheck.net\/NVIDIA-GeForce-RTX-4070-Ti-GPU-Benchmarks-and-Specs.679267.0.html","https:\/\/storage-asset.msi.com\/datasheet\/vga\/global\/GeForce-RTX-4070-Ti-GAMING-X-TRIO-12G.pdf","https:\/\/www.pgrid.app\/au\/gpus\/geforce-rtx-4070-ti","https:\/\/www.google.com\/search?q=NVIDIA+GeForce+RTX+5070+Ti+rumored+specifications+release+date&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"true comparison of 4070ti to 5070ti, DLSS hacks aside. use live data from today"},{"role":"a","text":"A direct comparison between the NVIDIA GeForce RTX 4070 Ti and the anticipated NVIDIA GeForce RTX 5070 Ti, based on currently available \"live data\" (which for the unreleased 5070 Ti, relies on comprehensive leaks and industry speculation as of September 29, 2025), is as follows, excluding DLSS-specific performance enhancements:\n\n**NVIDIA GeForce RTX 4070 Ti (Confirmed Specifications)**\n\n*   **Architecture:** Ada Lovelace (AD104 graphics processor)\n*   **CUDA Cores:** 7,680\n*   **Memory:** 12 GB GDDR6X\n*   **Memory Bus:** 192-bit\n*   **Memory Bandwidth:** 504.2 GB\/s\n*   **Memory Speed:** 21 Gbps effective\n*   **Boost Clock:** Up to 2610 MHz\n*   **Ray Tracing Cores:** 60 (3rd Gen)\n*   **Tensor Cores:** 240 (4th Gen)\n*   **TDP (Total Graphics Power):** 285 W\n*   **Interface:** PCIe 4.0 x16\n*   **Release Date:** January 3, 2023\n*   **Launch Price:** $799\n\n**NVIDIA GeForce RTX 5070 Ti (Anticipated\/Rumored Specifications)**\n\n*   **Architecture:** Blackwell (GB203 graphics processor)\n*   **CUDA Cores:** 8,960\n*   **Memory:** 16 GB GDDR7\n*   **Memory Bus:** 256-bit\n*   **Memory Bandwidth:** 896 GB\/s\n*   **Memory Speed:** 28 Gbps effective\n*   **Boost Clock:** Up to 2452 MHz (rumored, specific clocks can vary)\n*   **Ray Tracing Cores:** 70\n*   **Tensor Cores:** 280\n*   **TDP (Total Graphics Power):** 300 W (rumored, some sources suggest up to 350W)\n*   **Interface:** PCIe 5.0 x16\n*   **Anticipated Release Date:** February 20, 2025 (speculative)\n*   **Anticipated Launch Price:** $749 (speculative)\n\n**Key Comparisons (DLSS Hacks Aside):**\n\nWithout factoring in DLSS, the rumored RTX 5070 Ti represents a notable generational upgrade in raw hardware specifications over the RTX 4070 Ti:\n\n*   **Core Count:** The 5070 Ti is expected to have a significant increase in CUDA Cores (8,960 vs. 7,680), Ray Tracing Cores (70 vs. 60), and Tensor Cores (280 vs. 240), indicating a direct boost in processing capabilities.\n*   **Memory:** The 5070 Ti is anticipated to feature 16 GB of faster GDDR7 memory, an upgrade from the 4070 Ti's 12 GB GDDR6X. This increase in capacity and speed, combined with a wider 256-bit memory bus (compared to 192-bit on the 4070 Ti), results in a substantial jump in memory bandwidth (896 GB\/s vs. 504.2 GB\/s). This will be crucial for higher resolutions and more demanding textures.\n*   **Architecture:** Moving from Ada Lovelace to Blackwell architecture (GB203 vs. AD104) is expected to bring efficiency improvements and architectural enhancements that boost performance per core, even at similar clock speeds.\n*   **Power Consumption:** The 5070 Ti is rumored to have a slightly higher TDP of 300 W compared to the 4070 Ti's 285 W, suggesting more power delivery for increased performance.\n*   **PCIe Interface:** The 5070 Ti is expected to utilize PCIe 5.0 x16, offering increased bandwidth over the 4070 Ti's PCIe 4.0 x16.\n\nOverall, the rumored specifications point to a solid performance uplift for the RTX 5070 Ti in traditional rasterization and ray tracing performance, driven by more cores, faster and larger memory, and a newer architecture, independent of DLSS features.","sources":["https:\/\/www.techpowerup.com\/gpu-specs\/geforce-rtx-4070-ti.c3950","https:\/\/www.thefpsreview.com\/gpu-family\/nvidia-geforce-rtx-4070-ti-gpu-family-specifications\/","https:\/\/www.notebookcheck.net\/NVIDIA-GeForce-RTX-4070-Ti-GPU-Benchmarks-and-Specs.679267.0.html","http:\/\/www.pgrid.app\/au\/gpus\/geforce-rtx-4070-ti","https:\/\/www.techpowerup.com\/gpu-specs\/geforce-rtx-4070-ti-super.c4187","https:\/\/www.google.com\/search?q=NVIDIA+RTX+5070+Ti+expected+specifications+rumors&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"how to set up a mini gpu cluster of many cheap gpus for ai and games(?)"},{"role":"a","text":"Setting up a \"mini GPU cluster\" of many cheap GPUs for both AI and gaming is a complex endeavor with significant distinctions between the two use cases. While it's feasible and often cost-effective for AI workloads, it's generally not recommended for gaming.\n\nHere's a breakdown of how to approach it, distinguishing between AI and gaming needs:\n\n### 1. Defining \"Mini GPU Cluster\" and \"Cheap GPUs\"\n\n*   **Mini GPU Cluster:** This typically refers to a single machine with multiple GPUs, rather than multiple interconnected computers (nodes). While true multi-node clusters exist, for a \"mini\" setup using \"cheap\" GPUs, a single powerful workstation is more practical.\n*   **Cheap GPUs:** This often implies acquiring older generation consumer GPUs with high VRAM (e.g., NVIDIA RTX 3090 with 24GB GDDR6X) or used enterprise\/datacenter GPUs (e.g., NVIDIA Tesla P40 with 24GB GDDR5). These can be found at lower prices than current-generation high-end cards. The NVIDIA RTX 3090 is frequently cited for its 24GB VRAM, which is crucial for large AI models, and its availability at a lower price point than the RTX 4090. NVIDIA P40 cards are also noted for their 24GB VRAM and lower second-hand cost, but they are passively cooled and require significant airflow or active cooling solutions.\n\n### 2. Hardware Considerations\n\nBuilding such a system requires careful selection of components to ensure compatibility, power delivery, and cooling.\n\n*   **GPUs:**\n    *   **For AI:** Prioritize GPUs with high VRAM. Used NVIDIA RTX 3090s are a popular choice due to their 24GB VRAM, which is essential for loading large AI models (like LLMs). NVIDIA Tesla P40s are also an option for their 24GB VRAM and low cost, but remember they are passively cooled.\n    *   **For Gaming:** A single, more powerful current-generation GPU will almost always outperform a cluster of older, cheaper GPUs for gaming.\n*   **Motherboard:**\n    *   You need a motherboard with **multiple PCIe x16 slots** (at least 4-8), spaced sufficiently apart to accommodate the physical size of the GPUs.\n    *   Crucially, the motherboard and CPU combination must provide **enough PCIe lanes** to support all GPUs, ideally running at x8 or x16 speed per GPU. Server or workstation motherboards (e.g., those supporting Intel Xeon or AMD Threadripper CPUs) are best suited for this, offering 40-128 PCIe lanes. Older chipsets like X79, X99, and X299 are mentioned as viable options for budget multi-GPU builds.\n    *   Examples include the ASUS PRO WS W790E-SAGE SE or older ASUS X99-E WS [cite:1 (Multi GPU), 5 (Building a Multi-GPU)].\n*   **CPU:**\n    *   While GPUs do most of the heavy lifting for AI, the CPU is responsible for feeding data to the GPUs and managing the system. Choose a CPU with a high core count and ample PCIe lanes. Older Intel Xeon E5-26xx series or AMD EPYC\/Ryzen Threadripper CPUs are suitable, especially used models for cost savings. Aim for at least 2 cores\/4 threads per GPU.\n*   **RAM:**\n    *   Ensure ample system RAM (e.g., 64GB to 256GB DDR4 ECC RAM) to prevent bottlenecks when loading datasets for AI workloads.\n*   **Power Supply Unit (PSU):**\n    *   Multiple GPUs consume a significant amount of power. A high-wattage, 80 PLUS Platinum\/Titanium rated PSU (1500W-2000W or more) with sufficient PCIe power connectors is essential. Do not daisy-chain power cables to prevent melting.\n*   **Cooling and Case:**\n    *   This is paramount. Multiple GPUs generate immense heat.\n    *   **For consumer GPUs:** Look for blower-style GPUs that exhaust heat out the back of the case. A large, high-airflow case (e.g., a server chassis or specialized mining case) with strong case fans is necessary.\n    *   **For passively cooled GPUs (e.g., P40):** These *require* active airflow directed over them, often found in rackmount server chassis with powerful internal fans.\n    *   Custom watercooling loops or AIO solutions for each GPU are also options for noise reduction and thermal management.\n*   **Interconnects (NVLink\/SLI):**\n    *   **SLI:** Primarily for gaming, but largely dead and offers limited bandwidth (2 GB\/s) without pooling VRAM. Not useful for AI or modern gaming [cite:1 (NVLink vs SLI), 2 (NVLink vs SLI), 4 (NVLink vs SLI)].\n    *   **NVLink:** Designed for high-performance computing and AI, offering much higher bandwidth (up to 200 GB\/s for consumer, 300 GB\/s for enterprise) and the ability to **pool VRAM** between connected GPUs [cite:1 (NVLink vs SLI), 2 (NVLink vs SLI), 3 (NVLink vs SLI)]. This is a major advantage for AI models that exceed the VRAM of a single GPU. However, only high-end NVIDIA consumer cards (e.g., RTX 3090, 4090) and professional cards support NVLink [cite:4 (NVLink vs SLI)]. Many \"cheap\" older GPUs will not. For many AI inference tasks, GPUs can work independently via PCIe without NVLink, but for training very large models that require unified memory, NVLink is beneficial [cite:4 (NVLink vs SLI)].\n\n### 3. Software Setup (Primarily for AI)\n\n*   **Operating System:** Linux distributions like Ubuntu Server are the standard for AI\/ML development due to robust driver support and community resources [cite:4 (Building a cheap AI), 5 (Building a cheap AI)].\n*   **NVIDIA Drivers and CUDA Toolkit:** Install the appropriate NVIDIA GPU drivers and the CUDA Toolkit, which provides the development environment for GPU-accelerated computing.\n*   **Containerization (Docker\/Podman):** Use `nvidia-container-toolkit` to enable Docker containers to access the GPUs. This helps in managing different AI environments and dependencies [cite:5 (Building a cheap AI)].\n*   **AI Frameworks:** Install popular deep learning frameworks like TensorFlow and PyTorch, which leverage CUDA for GPU acceleration [cite:2 (Software)].\n*   **Orchestration (for true clusters or advanced multi-GPU management):**\n    *   **Kubernetes with `nvidia-device-plugin`:** For managing GPU resources and scheduling workloads across multiple nodes (if you expand to a true cluster) or even efficiently managing a single multi-GPU machine [cite:5 (Building a cheap AI)].\n    *   **Slurm:** A workload manager often used in HPC environments for managing job queues on clusters [cite:5 (Software)].\n    *   **GPUStack:** An open-source GPU cluster manager specifically for running LLMs, designed to aggregate GPU resources from various vendors (Nvidia, AMD, Apple, Intel) across different OSes. It aims to simplify the deployment and management of LLMs on clusters [cite:1 (Software)].\n*   **Distributed Training Libraries:** For training large models across multiple GPUs, libraries like PyTorch DistributedDataParallel or TensorFlow's distributed strategies are used, often relying on MPI (Message Passing Interface) for communication between GPUs or nodes [cite:1 (Building a small GPU cluster)].\n\n### 4. AI Workloads vs. Gaming Performance\n\n**For AI Workloads:**\n*   **Significant Benefits:** A multi-GPU setup excels at AI tasks like training neural networks, large-scale inference (e.g., running LLMs), and scientific simulations because these workloads are highly parallelizable [cite:2 (GPU Cluster Explained), 3 (GPU Cluster Explained)].\n*   **VRAM Aggregation:** With NVLink, multiple GPUs can effectively pool their VRAM, allowing you to run models that would not fit on a single GPU [cite:1 (NVLink vs SLI), 2 (NVLink vs SLI)].\n*   **Scalability:** Performance can scale well with more GPUs, significantly reducing training times from weeks to hours [cite:3 (GPU Cluster Explained)].\n\n**For Gaming:**\n*   **Generally Not Recommended:** Clustering \"many cheap GPUs\" for gaming is largely impractical and will likely lead to a worse experience than a single, powerful GPU [cite:1 (Gaming performance), 4 (Gaming performance), 5 (Gaming performance)].\n*   **Lack of Software Support:** Modern games rarely support multi-GPU setups (like SLI) and have largely abandoned such technologies [cite:1 (NVLink vs SLI), 4 (NVLink vs SLI)].\n*   **Performance Issues:** Even with technologies like SLI (which is now mostly deprecated), scaling was often poor, and issues like micro-stuttering were common [cite:2 (NVLink vs SLI)]. Inter-node latency in a true cluster would make real-time gaming impossible [cite:4 (Gaming performance)].\n*   **Overkill:** A single high-end gaming PC is more than sufficient for running all modern games at high settings [cite:5 (Gaming performance)].\n\n**In summary:** If your primary goal is AI, a mini GPU cluster with carefully selected cheap GPUs can be a powerful and cost-effective solution, especially for tasks limited by VRAM. However, for gaming, you are much better off investing in a single, high-performance GPU rather than attempting to cluster multiple cheaper ones. The complexity, lack of support, and performance drawbacks for gaming outweigh any perceived benefits.","sources":["https:\/\/www.reddit.com\/r\/LocalLLaMA\/comments\/1csn7dw\/lessons_learned_from_building_cheap_gpu_servers\/","https:\/\/ianbelcher.me\/tech-blog\/building-a-cheap-ai-ml-machine\/","https:\/\/adriangcoder.medium.com\/building-a-multi-gpu-deep-learning-machine-on-a-budget-3f3b717d80a9","https:\/\/www.youtube.com\/watch?v=vuTAkbGfoNY","https:\/\/www.google.com\/search?q=GPU+cluster+gaming+performance&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"the largest models need 1TB+ RAM. cheapest way to do it"},{"role":"a","text":"Achieving 1TB+ of RAM for AI models, especially for large language models (LLMs) that require massive memory, can be done most cheaply by focusing on high-capacity system RAM (DDR4 ECC or DDR5 ECC) rather than attempting to accumulate 1TB of GPU VRAM, which is prohibitively expensive.\n\nHere's the cheapest way to acquire a system with 1TB+ of RAM, primarily for CPU-based inference or for offloading GPU weights to system memory:\n\n### 1. Focus on Used Enterprise\/Server Hardware\n\nThis is by far the most cost-effective approach for massive amounts of RAM.\n\n*   **Motherboard & CPUs:**\n    *   Look for **used dual-socket server motherboards** that support Intel Xeon E5-2600 series (v3\/v4 generations are good value) or AMD EPYC 7001\/7002 series. These platforms are designed for high RAM capacities and often have 16-24 DIMM (RAM) slots per CPU socket, allowing for 32-48 total slots in a dual-CPU configuration.\n    *   **Examples:** Dell PowerEdge R630\/R730, HP ProLiant Gen9\/Gen10, Supermicro X10DRL-i, X11DPL-i, or similar boards. You can find barebones systems (motherboard, CPUs, heatsinks) or full servers without drives on eBay or server liquidation sites.\n    *   **Why Dual Socket:** More RAM slots, more PCIe lanes, and more CPU cores to handle the data loading and processing.\n*   **RAM (The Main Cost):**\n    *   **Used DDR4 ECC Registered (RDIMM) RAM** is significantly cheaper than new RAM.\n    *   Look for modules like 32GB or 64GB RDIMMs. To hit 1TB (1024GB), you would need:\n        *   32 x 32GB RDIMMs = 1024GB\n        *   16 x 64GB RDIMMs = 1024GB\n    *   **Sources:** eBay, server recycling companies, specific server hardware resellers. The price per GB on used ECC RDIMMs is dramatically lower than consumer DDR4\/DDR5.\n*   **Power Supply Unit (PSU):**\n    *   Server PSUs are often part of the chassis. Ensure they are adequate for the CPUs and any GPUs you might add.\n*   **Storage:**\n    *   A fast NVMe SSD (PCIe 3.0 or 4.0) is crucial for loading large models quickly from disk into RAM. Even if the model runs mostly in RAM, initial load times are important.\n\n**Example Configuration (Budget-focused, approximate costs):**\n\n*   **Used Server Chassis (e.g., Dell R730 or similar):** $200 - $500\n*   **2 x Intel Xeon E5-2690 v4 CPUs (14 cores each):** $150 - $300 (for both)\n*   **1TB (1024GB) DDR4-2133P\/2400T ECC RDIMM (e.g., 16x 64GB or 32x 32GB modules):** $300 - $600 (This is where the biggest savings are, *if* you find good deals)\n*   **2x NVMe PCIe adapters + 1TB NVMe SSD:** $100 - $200\n*   **Basic GPU (e.g., Used NVIDIA P40\/P100 or a cheap consumer card) for acceleration\/offloading:** $100 - $300 (Optional, but highly recommended for any acceleration)\n\n**Total Estimated Cost: $850 - $1900** (highly variable based on deals for RAM and GPUs). This is significantly cheaper than attempting to buy 1TB of *new* RAM or even a fraction of that in VRAM.\n\n### 2. Software Strategies for Massive Models\n\nEven with 1TB of RAM, efficient software usage is critical.\n\n*   **Model Quantization:**\n    *   This is the most impactful technique. Reducing the precision of model weights (e.g., from FP16 to INT8, INT4, or even 2-bit) drastically cuts down memory requirements. A 70B parameter model might need ~140GB in FP16, but only ~35GB in INT4, allowing much larger models to fit into your 1TB system RAM, or even be shared across smaller GPUs.\n    *   **Libraries:** `llama.cpp` (for CPU inference), `bitsandbytes`, `AWQ`, `GPTQ`.\n*   **CPU Offloading \/ Layer Offloading:**\n    *   Libraries like `llama.cpp` excel at running LLMs primarily on the CPU, using system RAM, with optional GPU acceleration. This allows you to load models that are too large for any single GPU.\n    *   You can run most of the model on the CPU (using 1TB of system RAM) and offload a few critical layers (or the first few layers for faster token generation) to a smaller GPU if you have one.\n*   **Virtual Memory \/ Swapping:**\n    *   While not ideal for performance, having fast NVMe storage allows the OS to use swap space efficiently if your model temporarily exceeds physical RAM. However, this will be much slower than direct RAM access.\n*   **Operating System:** Linux distributions (Ubuntu Server, Debian, Rocky Linux) are preferred for server environments due to better support for enterprise hardware and open-source AI tools.\n\n### 3. GPU Considerations (Optional but Recommended)\n\nWhile the goal is 1TB+ system RAM, a GPU can still be immensely helpful:\n\n*   **For Acceleration:** Even a single used NVIDIA RTX 3090 (24GB VRAM) or even a passively cooled Tesla P40 (24GB VRAM, requires serious airflow) can significantly accelerate parts of a large model when paired with massive system RAM, even if the full model doesn't fit in VRAM. This is often done by offloading critical layers or using techniques that leverage both CPU and GPU.\n*   **Compatibility:** Ensure your chosen server motherboard has appropriate PCIe slots and power connectors for any consumer GPUs you wish to add. Server PSUs may require adapters for standard PCIe power connectors.\n\n### 4. Cloud Alternatives\n\nWhile you asked for \"cheapest way to do it\" (implying hardware ownership), for many, renting resources in the cloud can be cheaper *per use* and avoids the upfront hardware investment and maintenance.\n\n*   **AWS, Azure, GCP, CoreWeave, Lambda Labs:** These providers offer instances with massive amounts of system RAM (e.g., up to 24TB on some specialized instances) and powerful GPUs.\n*   **Cost-effectiveness:** If you only need 1TB+ for specific projects or infrequent use, renting by the hour\/minute often beats buying and maintaining your own server.\n\n**Conclusion:**\n\nThe cheapest way to get 1TB+ of RAM is to build a system around **used, dual-socket server hardware with ample DDR4 ECC RDIMM slots and populate it with cheap, used 32GB or 64GB RDIMMs.** This, combined with aggressive model quantization and CPU offloading strategies, makes running very large AI models feasible on a budget."}]}