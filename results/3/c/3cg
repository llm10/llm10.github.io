{"s":"Gemini","m":"gemini-2.5-flash","t":1759113984,"r":[{"role":"u","text":"street fighter iv how to use ken's first special move when charged"},{"role":"a","text":"To use Ken's \"first special move\" (Hadoken) in Street Fighter IV when \"charged,\" you are likely referring to its EX version. An EX special move consumes one stock of your Super Gauge to enhance the move's properties.\n\nTo perform Ken's EX Hadoken:\n1.  Input the Hadoken motion: Down (\u2193), Down-Forward (\u2198), Forward (\u2192).\n2.  Press two punch buttons simultaneously (e.g., LP+MP, LP+HP, or MP+HP) at the end of the motion.","sources":["https:\/\/www.youtube.com\/watch?v=WDeYu47I9fE","https:\/\/www.youtube.com\/watch?v=ZuiABDPFcxs","https:\/\/www.youtube.com\/watch?v=6Jz4mw-H2Ao","https:\/\/www.google.com\/search?q=Street+Fighter+IV+Ken+charged+first+special+move&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"street fighter iv how to use evil ryu's first special move when charged"},{"role":"a","text":"To use Evil Ryu's \"first special move\" (Hadoken) in Street Fighter IV when \"charged,\" you are likely referring to its EX version. An EX special move consumes one stock of your Super Gauge to enhance the move's properties.\n\nTo perform Evil Ryu's EX Hadoken:\n1.  Input the Hadoken motion: Down (\u2193), Down-Forward (\u2198), Forward (\u2192).\n2.  Press two punch buttons simultaneously (e.g., LP+MP, LP+HP, or MP+HP) at the end of the motion."}]}