{"s":"Gemini","m":"gemini-flash-latest","t":1759770922,"r":[{"role":"u","text":"why do shower heads in Greece not always fitted to the wall"},{"role":"a","text":"The shower heads you are referring to are called \"hand-held\" or \"detachable\" shower heads, which are very common in Greece and many other European countries.\n\nThe main reasons for their prevalence are a combination of practicality, tradition, and building design:\n\n*   **Increased Control and Efficiency:** A hand-held shower head allows the user to direct the water precisely where they need it, making it easier to rinse specific parts of the body and potentially save water by wetting and rinsing only one area at a time. This is often cited by people who prefer them as offering more thorough cleaning and a \"massage\" effect with high-pressure hot water.\n*   **Washing the Bathroom:** In many Greek bathrooms, particularly in older buildings or smaller apartments\/hotels, there is often no separate shower stall or curtain, meaning the entire bathroom floor is a wet room with a floor drain. The detachable shower head is essential for cleaning and rinsing the entire room, including the floor and walls, after bathing.\n*   **Historical and Standard European Plumbing:** The design of plumbing fixtures in many European countries, including Greece, traditionally favors an exposed mixer tap that sits on the wall, often over a bathtub. It's simple to attach a flexible hose and shower head to this mixer as a standard fixture, whereas a fixed shower head requires the water pipe to be run up and out of the wall at a higher position.\n*   **Dual Functionality (Common in Europe):** While many European showers have a detachable head, they often also come with an adjustable wall mount or slide bar, which allows the user to fix the shower head to the wall and use it hands-free like a traditional American-style shower, or detach it to use as a hand spray. In some budget accommodations, however, the wall mount may be non-existent, broken, or simply not used, leading to the experience of a shower head that is not fitted to the wall.","sources":["https:\/\/www.reddit.com\/r\/AskBalkans\/comments\/rnv8o2\/why_dont_people_in_the_balkans_want_to_connect\/","https:\/\/www.pubclub.com\/destinations\/europe\/european-travel-blog-those-confusing-shower-heads-in-europe\/","https:\/\/www.reddit.com\/r\/TooAfraidToAsk\/comments\/182qr9q\/why_are_american_and_european_showers_different\/","https:\/\/en.wikipedia.org\/wiki\/Shower","https:\/\/www.reddit.com\/r\/AskBalkans\/comments\/kc84fy\/are_detachable_shower_heads_the_norm_in_your\/","https:\/\/www.google.com\/search?q=Greek+bathroom+design+shower+heads&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=why+are+shower+heads+in+greece+not+always+fitted+to+the+wall&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=shower+head+customs+greece+not+fixed+to+wall&client=app-vertex-grounding&safesearch=active"]}]}