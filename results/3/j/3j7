{"s":"Gemini","m":"gemini-flash-latest","t":1759771018,"r":[{"role":"u","text":"why do shower heads in Greece not always fitted to the wall"},{"role":"a","text":"The shower heads you are referring to are called \"hand-held\" or \"detachable\" shower heads, which are very common in Greece and many other European countries.\n\nThe main reasons for their prevalence are a combination of practicality, tradition, and building design:\n\n*   **Increased Control and Efficiency:** A hand-held shower head allows the user to direct the water precisely where they need it, making it easier to rinse specific parts of the body and potentially save water by wetting and rinsing only one area at a time. This is often cited by people who prefer them as offering more thorough cleaning and a \"massage\" effect with high-pressure hot water.\n*   **Washing the Bathroom:** In many Greek bathrooms, particularly in older buildings or smaller apartments\/hotels, there is often no separate shower stall or curtain, meaning the entire bathroom floor is a wet room with a floor drain. The detachable shower head is essential for cleaning and rinsing the entire room, including the floor and walls, after bathing.\n*   **Historical and Standard European Plumbing:** The design of plumbing fixtures in many European countries, including Greece, traditionally favors an exposed mixer tap that sits on the wall, often over a bathtub. It's simple to attach a flexible hose and shower head to this mixer as a standard fixture, whereas a fixed shower head requires the water pipe to be run up and out of the wall at a higher position.\n*   **Dual Functionality (Common in Europe):** While many European showers have a detachable head, they often also come with an adjustable wall mount or slide bar, which allows the user to fix the shower head to the wall and use it hands-free like a traditional American-style shower, or detach it to use as a hand spray. In some budget accommodations, however, the wall mount may be non-existent, broken, or simply not used, leading to the experience of a shower head that is not fitted to the wall.","sources":["https:\/\/www.reddit.com\/r\/AskBalkans\/comments\/rnv8o2\/why_dont_people_in_the_balkans_want_to_connect\/","https:\/\/www.pubclub.com\/destinations\/europe\/european-travel-blog-those-confusing-shower-heads-in-europe\/","https:\/\/www.reddit.com\/r\/TooAfraidToAsk\/comments\/182qr9q\/why_are_american_and_european_showers_different\/","https:\/\/en.wikipedia.org\/wiki\/Shower","https:\/\/www.reddit.com\/r\/AskBalkans\/comments\/kc84fy\/are_detachable_shower_heads_the_norm_in_your\/","https:\/\/www.google.com\/search?q=Greek+bathroom+design+shower+heads&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=why+are+shower+heads+in+greece+not+always+fitted+to+the+wall&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=shower+head+customs+greece+not+fixed+to+wall&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"why no bidets in Greece"},{"role":"a","text":"While bidets are not as universally common in Greece as they are in some other Southern European countries like Italy or Portugal (where they are mandatory), they are certainly not non-existent.\n\nThe reasons they are not a standard fixture in every Greek home or hotel today are primarily a combination of **space constraints**, **changing trends in modern construction**, and the existence of **alternative water-based hygiene methods**.\n\nHere is a breakdown of the factors:\n\n### 1. Space and Building Design\nThe primary reason for the absence of bidets in newer or smaller apartments and hotels is the size of the bathrooms.\n\n*   **Small Bathrooms:** Greek and other European city apartments often have very small bathrooms where it is difficult to fit a toilet, sink, shower, and a separate bidet basin.\n*   **The Building Boom:** During the post-1990 building boom, there was a drive for efficiency and smaller living spaces, and architects and builders commonly omitted the bidet to save precious square footage. This led to the bidet being seen as a superfluous fixture for a time.\n\n### 2. Changing Trends and Tradition\nThe bidet was actually quite common in Greece a few decades ago, particularly in homes built up to the early 1990s.\n\n*   **Falling Out of Fashion:** Like in France and Spain, bidets began to fall out of fashion in new Greek construction after the 1990s. Some people even removed them from older bathrooms because they were not being used or were seen as \"old school\".\n*   **Southern European Context:** While less common than in Italy or Portugal, Greece is listed alongside countries like Albania and Turkey where bidets are still found. It's more accurate to say their prevalence declined rather than they were never present.\n\n### 3. Alternative Water-Based Cleaning\nThe need for a dedicated bidet is often mitigated by other fixtures that achieve a similar goal:\n\n*   **Hand-Held Shower Head:** The detachable shower head (which you asked about previously) is a standard fixture in Greek bathrooms, and many people use it as a highly effective, though less dedicated, alternative for rinsing. Since the bathrooms often have a floor drain and are designed to get wet (a wet room style), using the shower head is a simple and quick option.\n*   **Bidet Showers (Spray Nozzles):** Although less widespread than in Muslim-majority countries or parts of Asia, some modern homes and renovated bathrooms may install a flexible spray nozzle\/hose (often called a \"bidet shower\" or \"shattaf\") next to the toilet. This is a space-saving compromise that performs the same function as a bidet basin.\n\nIn short, while you may find them in older homes or luxury accommodations, the **lack of space** in a typical modern Greek bathroom and the **convenience of the hand-held shower** have prevented the separate bidet fixture from becoming a universal standard.","sources":["https:\/\/www.lemonsandluggage.com\/bathrooms-in-greece\/","https:\/\/www.reddit.com\/r\/greece\/comments\/1lht6y2\/why_dont_you_use_bidets_in_greece\/","https:\/\/www.quora.com\/Are-there-bidets-in-Europe","https:\/\/www.oceanwellxm.cn\/bidet-popularity-by-country_n223","https:\/\/en.wikipedia.org\/wiki\/Bidet","https:\/\/www.reddit.com\/r\/bidets\/comments\/x5mfy6\/bidet_in_greece\/","https:\/\/www.google.com\/search?q=why+are+bidets+not+common+in+Greece&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=prevalence+of+bidets+in+Greece&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=bathroom+hygiene+practices+in+Greece&client=app-vertex-grounding&safesearch=active"]}]}