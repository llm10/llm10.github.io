{"s":"Gemini","m":"gemini-flash-latest","t":1760045076,"r":[{"role":"u","text":"canada broker fees. wealthsimple vs questrade vs interactive brokers"},{"role":"a","text":"Based on the most common fee structures for Canadian self-directed investment accounts, here is a direct comparison of the broker fees for Wealthsimple Trade, Questrade, and Interactive Brokers (IBKR) in Canada.\n\n| Feature | Wealthsimple Trade (Core) | Questrade | Interactive Brokers (IBKR) |\n| :--- | :--- | :--- | :--- |\n| **Canadian Stocks & ETFs** | **$0 commission** | **$0 commission** | Low commission, starting at **$0.01 CAD\/share (Min $1.00 CAD\/order)** (Fixed Pricing) |\n| **U.S. Stocks & ETFs** | **$0 commission** | **$0 commission** | Low commission, starting at **$0.005 USD\/share (Min $1.00 USD\/order)** (Fixed Pricing) |\n| **Currency Conversion (FX) Fee** | **1.5%** on every trade (buy and sell) unless you pay for a USD account. | **1.5%** on every conversion (can be avoided by holding USD in registered accounts and\/or using Norbert's Gambit). | Extremely low. Spot rate with a tiny markup (**~0.002%**) and a minimum fee (e.g., **$2 USD**) per conversion. |\n| **USD Account** | **Available** for a **$10\/month** fee (Core plan), or free for Premium\/Generation tiers. | **Available** in all account types (TFSA, RRSP, etc.), allowing you to hold USD and avoid repeated FX fees. | **Available** in all account types. |\n| **Options** | **USD $0.75 per contract** (plus base commission of up to $2 USD, depending on account tier) | **$0 base + $0.99 per contract** (lowers to $0.75 for active traders) | **USD $0.15 to $0.65 per contract** (Tiered) or **USD $0.65 per contract** (Fixed). |\n| **Account Fees (Annual\/Inactivity)** | **$0** | **$0** | **$0** |\n| **Withdrawal Fees** | **$0** | **$0** for Electronic Fund Transfers (EFTs). Wire transfers cost $20-$40. | **One free withdrawal per month**, then a small fee (e.g., $2 CAD\/$1 USD) for subsequent EFT withdrawals. |\n| **Account Transfer-Out Fee** | Varies, but often free if the balance is over a certain amount. | **$150** for a full account transfer. | Varies, but ATON position transfers are often free. |\n\n### Summary and Key Differences\n\n**For the Casual Canadian Investor (Buying only Canadian securities):**\n*   **Wealthsimple Trade** and **Questrade** are the cheapest options, both offering true $0 commission on Canadian stocks and ETFs with no annual fees.\n\n**For the U.S. Stock Investor \/ Trader (Frequent USD trading):**\n*   **Interactive Brokers (IBKR)** is significantly cheaper for U.S. dollar conversions, charging a minimal markup compared to the 1.5% fee at the others. The 1.5% fee at Wealthsimple and Questrade for currency conversion can quickly negate the $0 trading commission.\n*   **IBKR** also offers the lowest commissions on Options trading.\n\n**The Foreign Exchange (FX) Trap:**\n*   **Wealthsimple** charges 1.5% on *each* trade involving U.S. dollars unless you pay the monthly fee for a dedicated USD account. For example, a $1,000 USD purchase would cost you $\\approx \\$15$ in conversion fees, and another $\\approx \\$15$ when you eventually sell and convert the money back to CAD.\n*   **Questrade** also charges 1.5% for conversions, but it allows users to hold USD in registered accounts (like TFSAs and RRSPs), meaning the FX fee is only paid when funding the USD side. It also allows for **Norbert's Gambit**, a process using an inter-listed stock to convert currency at a near spot rate for a one-time trade commission (which is approximately $\\$10$).\n*   **Interactive Brokers (IBKR)** is the most cost-effective for currency conversion, with a minimal fee and tight spreads, making it the best choice for frequent or large-volume USD traders.\n\n**Trading Costs Beyond Commission:**\n*   All three brokers have low to no account maintenance fees.\n*   Keep in mind that while Questrade and Wealthsimple have $0$ commission on stocks\/ETFs, other small regulatory fees (like ECN fees or SEC fees on US sales) may still apply, but these are typically negligible compared to commissions or currency conversion fees.","sources":["https:\/\/www.moneysense.ca\/save\/investing\/wealthsimple-trade-review\/","https:\/\/money.ca\/investing\/reviews\/wealthsimple-vs-questrade","https:\/\/www.moneysense.ca\/save\/investing\/questrade-trading-fees-for-canadian-investors\/","https:\/\/www.interactivebrokers.ca\/en\/trading\/globaltrader\/pricing.php","https:\/\/modernmoney.ca\/investing\/wealthsimple-or-interactive-brokers\/","https:\/\/www.wealthsimple.com\/en-ca\/legal\/fees\/trade","https:\/\/www.questrade.com\/pricing\/self-directed-commissions-plans-fees","https:\/\/www.youtube.com\/watch?v=3ouUKCJWnf4","https:\/\/hellosafe.ca\/en\/investing\/broker\/interactive-brokers","https:\/\/www.investopedia.com\/wealthsimple-trade-review-6503907","https:\/\/milliondollarjourney.com\/questrade-review.htm","https:\/\/www.interactivebrokers.ca\/en\/pricing\/commissions-home.php","https:\/\/brokerchooser.com\/broker-reviews\/questrade-review\/questrade-fees","https:\/\/hellosafe.ca\/en\/investing\/broker\/wealthsimple-trade","https:\/\/www.investopedia.com\/questrade-review-5070359","https:\/\/www.reddit.com\/r\/Wealthsimple\/comments\/1iomk2x\/wealthsimple_vs_questrade_in_2025\/","https:\/\/www.google.com\/search?q=Wealthsimple+Trade+fees+Canada&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=canada+broker+fees+Wealthsimple+vs+Questrade+vs+Interactive+Brokers+stocks+ETFs+options&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Questrade+fees+Canada&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Interactive+Brokers+Canada+fees&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"Norbert's Gambit"},{"role":"a","text":"Norbert's Gambit is a low-cost, multi-step strategy used by Canadian investors to convert Canadian Dollars (CAD) into U.S. Dollars (USD), or vice versa, at a near-perfect spot exchange rate, thus **avoiding the typical 1.5% to 2.5% foreign exchange (FX) fee** charged by banks and most brokerages.\n\nIt is one of the most popular and established methods for currency conversion in a Canadian brokerage account.\n\n### How Norbert's Gambit Works (The Process)\n\nThe method involves using an **interlisted security**\u2014a stock or, more commonly, an Exchange-Traded Fund (ETF) that trades on both a Canadian exchange in CAD and a U.S. exchange in USD.\n\nThe most common security used for this purpose is the **Horizons U.S. Dollar Currency ETF** (Global X U.S. Dollar Currency ETF):\n*   **DLR.TO** (Trades on the Toronto Stock Exchange (TSX) in CAD)\n*   **DLR.U.TO** (Trades on the TSX in USD)\n\nHere is the four-step process for converting **CAD to USD**:\n\n1.  **Buy the Canadian Ticker:** Use your Canadian dollars (CAD) to buy shares of the Canadian-denominated security, typically **DLR.TO**, on the TSX.\n2.  **Journal the Shares:** Contact your brokerage and request a **\"journaling\"** of the DLR.TO shares. This process transfers the shares from the CAD side of your account to the USD side. The shares themselves do not move markets; they are simply re-registered to their U.S.-denominated equivalent, **DLR.U.TO**. This step usually takes 1\u20133 business days.\n3.  **Wait for Journaling:** The shares must settle and be visible as the U.S. ticker in your account before the next step.\n4.  **Sell the U.S. Ticker:** Once the shares are successfully journaled, sell the U.S.-denominated security, **DLR.U.TO**, on the TSX. The proceeds are settled in U.S. Dollars (USD) in your brokerage account.\n\nThe only cost incurred is the trading commission to buy and sell the security, which is significantly lower than a percentage-based FX fee, especially for large amounts.\n\n---\n\n### Broker Comparison for Norbert's Gambit\n\nThe value and necessity of Norbert's Gambit depend entirely on the broker's native FX fees.\n\n| Broker | Norbert's Gambit Viability | Why? |\n| :--- | :--- | :--- |\n| **Questrade** | **Highly Recommended** | Questrade charges a high currency conversion fee (approx. 1.5\u20132%) if you don't use this method. Norbert's Gambit allows you to avoid this, only paying a low commission (e.g., free ETF buy, $4.95 USD ETF sell) and sometimes a small processing\/journal fee. This makes it extremely cost-effective for amounts over about $1,000 CAD. |\n| **Interactive Brokers (IBKR)** | **Unnecessary\/Not Recommended** | IBKR is renowned for its extremely low, institutional-grade FX conversion fees (typically a tiny markup with a minimum fee like **$2 USD**). Using Norbert's Gambit would be more complex, involve a several-day delay, and likely cost the same or *more* than a direct currency conversion. |\n| **Wealthsimple Trade** | **Not Possible** | Wealthsimple Trade's platform does not support the crucial \"journaling\" step required to perform Norbert's Gambit. To trade USD stocks, you must either pay the 1.5% FX fee on every trade or pay a monthly subscription fee for a dedicated USD account. |\n\n### The \"Risk\" (The \"Gambit\" Portion)\n\nThe use of the word \"gambit\" can be misleading, as the risk is minimal when using the DLR\/DLR.U ETF.\n\n*   **Currency Risk:** When converting **CAD to USD** using DLR, the conversion rate is locked in the moment you *buy* DLR.TO, and the subsequent journaling\/selling process is insulated from market moves because the DLR\/DLR.U ETF is specifically designed to track the CAD\/USD exchange rate. The only risk is the time delay (1-3 days) where a significant currency fluctuation could occur, but this would affect any other conversion method as well.\n*   **Cost vs. Conversion Fee:** For small amounts (e.g., less than $1,000 CAD), the fixed trading commissions and\/or processing fees may make Norbert's Gambit more expensive than just paying the broker's standard FX fee. It is generally a method reserved for large transfers to ensure the commission costs are a negligible percentage of the total amount.","sources":["https:\/\/wealthsavvy.ca\/norberts-gambit-questrade\/","https:\/\/thecanadianinvestorpodcast.com\/blog\/the-simple-4-step-guide-to-norberts-gambit-converting-cad-usd","https:\/\/impotax.org\/en\/advice\/what-is-norberts-gambit\/","https:\/\/www.stocktrades.ca\/norberts-gambit\/","https:\/\/www.google.com\/search?q=how+to+do+norbert%27s+gambit+questrade+vs+interactive+brokers&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Norbert%27s+Gambit+explained+Canada&client=app-vertex-grounding&safesearch=active"]}]}