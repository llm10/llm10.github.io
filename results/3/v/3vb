{"s":"Gemini","m":"gemini-flash-latest","t":1760641574,"r":[{"role":"u","text":"how many hours did Hasan force his dog to sit on stream by using shock collar"},{"role":"a","text":"The duration of the alleged forced sitting is a point of controversy and has been cited by critics as a period of \"hours,\" \"multiple hours,\" or \"4+ hours\" per stream.\n\nThe controversy surrounds Hasan Piker's dog, Kaya, who typically remains on a designated bed in the background of his livestreams. Critics have alleged that a shock collar was used to enforce the \"place\" command, keeping her in that spot for \"hours and hours on end,\" as Piker himself once mentioned in a resurfaced clip about training.\n\nOne specific online comment claimed the dog was made to \"sit on for **4+ hours** while he livestreams.\" Following the viral clip where the dog yelped (which many attributed to a shock), a user noted the dog \"proceeded to not move from her spot for another **four hours**.\"\n\nHasan Piker has denied using a shock collar, claiming the device is a vibration\/AirTag collar for gentle training and tracking, and that the dog's yelp was due to clipping her dewclaw on the bed.","sources":["https:\/\/knowyourmeme.com\/memes\/events\/hasan-piker-dog-shock-collar-controversy-collargate","https:\/\/timesofindia.indiatimes.com\/world\/us\/hasan-piker-collargate-twitch-streamer-denies-shock-collar-use-after-dogs-viral-yelp-netizens-aint-buying-it\/articleshow\/124428362.cms","https:\/\/www.sportskeeda.com\/us\/streamers\/hasanabi-shock-collar-controversy-list-streamers-defended-criticized","https:\/\/www.reddit.com\/r\/battlecats\/comments\/1o6fqhr\/fanmade_hasan\/","https:\/\/www.forbes.com\/sites\/danidiplacido\/2025\/10\/08\/hasan-pikers-dog-shock-collar-controversy-explained\/","https:\/\/www.google.com\/search?q=Hasan+Piker+dog+sit+shock+collar+stream+duration&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Hasan+Piker+dog+shock+collar+stream+hours+forced+sit&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"has new zeland done a rdna vaccine on cows"},{"role":"a","text":"New Zealand is currently **not** administering an approved, registered recombinant DNA (rDNA) or recombinant RNA (mRNA) vaccine to its cattle population.\n\nThe country is, however, heavily involved in the **research and development** of these next-generation vaccines for livestock.\n\nKey points on the status of the technology in New Zealand:\n\n*   **Existing Vaccines:** The current registered vaccines used for common cattle diseases, such as Bovine Viral Diarrhoea (BVD), are made using older technology, like the **inactivated BVD virus**.\n*   **Research & Development:** The New Zealand government has established an **RNA Development Platform** to fund and support projects focused on creating new RNA vaccines for livestock diseases, including BVD.\n*   **Timeline:** Scientists working on the BVD RNA vaccine have indicated that, after proving the initial concept, it would likely take an additional **four to five years to get registration** for a recombinant vaccine in New Zealand.\n*   **Regulatory Status:** All vaccines for commercial use in animals must be registered under the Agricultural Compounds and Veterinary Medicines (ACVM) Act before they can be manufactured, sold, or **used** on New Zealand farms. The recombinant vaccines being developed are not yet registered for widespread administration.\n*   **Methane Reduction:** A New Zealand biotech startup is also developing a recombinant vaccine designed to dramatically lower methane emissions from cattle, but this product is still in the development phase.","sources":["https:\/\/www.agresearch.co.nz\/news\/new-investment-for-rna-vaccine-research\/","https:\/\/www.agresearch.co.nz\/news\/rna-vaccines-a-potential-game-changer-for-livestock\/","https:\/\/www.beehive.govt.nz\/release\/new-vaccine-research-aims-combat-prevalent-bovine-disease","https:\/\/www.rnz.co.nz\/news\/country\/562188\/mpi-closely-watching-bird-flu-vaccine-trials-for-cattle-and-poultry","https:\/\/www.google.com\/search?q=licensed+rDNA+vaccine+for+cattle+New+Zealand&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=administered+mRNA+vaccine+cattle+New+Zealand&client=app-vertex-grounding&safesearch=active"]}]}