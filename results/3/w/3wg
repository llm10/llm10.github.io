{"s":"Gemini","m":"gemini-flash-latest","t":1760706035,"r":[{"role":"u","text":"were Galicia and Bukovina both nazi af"},{"role":"a","text":"The political and social situations in both Galicia and Bukovina during World War II involved significant collaboration with and ideological alignment with Nazi Germany by certain powerful local political and military groups, as well as participation by a portion of the civilian population.\n\n### Galicia (Eastern Galicia)\n\nEastern Galicia (which included the city of Lviv) was a major center for radical Ukrainian nationalism, particularly the **Organization of Ukrainian Nationalists (OUN)**, which many scholars characterize as a form of fascism or integral nationalism.\n\n*   **Ideology and Alliance:** The OUN was anti-Polish and anti-Soviet, and its factions developed a pro-German geopolitical and pro-Nazi ideological approach, with OUN activists studying in German Nazi party schools.\n*   **Active Collaboration:** When the Nazis invaded in 1941, local Ukrainian nationalist militia quickly allied with them, hoping to gain an independent state. They assisted in implementing Nazi policies, including taking revenge on Poles and Jews.\n*   **Military Units:** A significant number of young Ukrainian men, tens of thousands, joined the **Waffen SS Division Galicia** (formally the 14th Waffen Grenadier Division of the SS (1st Galician)), which was favored by the more loyal-to-Germany OUN faction, the OUN-M.\n*   **The Holocaust and Massacres:** Nationalist groups and collaborators were instrumental in the genocide of the Jewish and Polish populations. Local forces, in cooperation with the German SS and SD, were responsible for the murder of the Polish intelligentsia and the Jewish community in the area.\n\n### Bukovina (Northern Bukovina)\n\nNorthern Bukovina was annexed by the Soviet Union in 1940 and then recovered in 1941 by **Romania**, a key ally of Nazi Germany, under Marshal Ion Antonescu.\n\n*   **State Alignment:** Romania's Antonescu regime was a fascist state that was complicit in the Holocaust and joined the Nazi invasion of the Soviet Union.\n*   **The Holocaust and Civilian Complicity:** The persecution and destruction of the Jewish population in Bukovina was a state-sponsored policy of the Romanian authorities, in collaboration with the German forces. The \"complete destruction of Jewish life\" was facilitated by \"horizontal cooperation\" between the Romanian military and **\"various Christian locals\"** who assisted in searching for, guarding, plundering, and murdering Jews.\n*   **Ukrainian Nationalist Activity:** The OUN was also active in Bukovina, engaging in armed resistance against the Soviets, with the goal of incorporating the territory into a future Ukrainian state.\n\nIn summary, the extent of collaboration and ideological alignment with Nazi Germany in both territories was substantial:\n\n*   **Galicia** had a powerful, ideologically fascist\/Nazi-aligned nationalist movement that provided troops for the Waffen-SS and actively participated in genocide and ethnic cleansing.\n*   **Bukovina** was under the control of a Nazi-allied fascist regime (Romania), and the local Christian population demonstrated widespread cooperation and participation in the genocide of the Jewish population.","sources":["https:\/\/en.wikipedia.org\/wiki\/Organisation_of_Ukrainian_Nationalists","https:\/\/mid.ru\/en\/foreign_policy\/historical_materials\/1920326\/","https:\/\/eurasiaoverland.com\/2011\/11\/18\/32\/","https:\/\/jacobin.com\/2024\/12\/ukraine-myths-wwii-nationalism-nazis","https:\/\/www.jewishgen.org\/yizkor\/Galicia5\/files\/JewishGenocideinGalicia1.pdf","https:\/\/en.wikipedia.org\/wiki\/Bukovina","https:\/\/en.wikipedia.org\/wiki\/Bukovina_Germans","https:\/\/www.proquest.com\/openview\/5bebb72758937a6f1e8f3a0755f7ea0a\/1?pq-origsite=gscholar&cbl=18750","https:\/\/www.quora.com\/Why-was-Romania-on-the-side-of-German-Nazis-in-WW2","https:\/\/www.google.com\/search?q=political+leanings+of+Galicia+and+Bukovina+during+World+War+II&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Galicia+and+Bukovina+Nazi+collaboration+World+War+II&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Ukrainian+nationalism+and+Nazi+Germany+Galicia+Bukovina&client=app-vertex-grounding&safesearch=active"]}]}