{"s":"Gemini","m":"gemini-flash-latest","t":1761121214,"r":[{"role":"u","text":"details of lone wolf biker gang"},{"role":"a","text":"The Lone Wolf Motorcycle Club (MC) is an outlaw one-percenter motorcycle club, primarily based in Australia.\n\n**Key Details:**\n\n*   **Founding:** The club was founded in Australia in 1971 by Sy Allsep.\n*   **Status:** They are classified as a \"one percenter\" motorcycle club, a term used for outlaw motorcycle clubs (OMCs). OMCs are often considered outlaw not only because they are not sanctioned by the American Motorcyclist Association (AMA) but also because they may use their clubs as \"conduits for criminal enterprises\".\n*   **Founder's Background:** The founder, Sy Allsep (Stephen Charles Allsep), owned Sy's Harley-Davidson in Campbelltown, New South Wales, and died in 2015.\n*   **Structure and Chapters:** The club has over a dozen chapters throughout Australia, with a strong presence in New South Wales and chapters in Queensland and Western Australia.\n*   **Membership:** The membership is noted for being diverse, including many Pacific Islander and Middle Eastern members.\n*   **Criminal Activities\/Allegations:** The Lone Wolf MC has been associated with various criminal activities and police operations:\n    *   In 2014, a police operation dismantled an alleged anabolic steroid ring in Queensland, leading to the arrest of four men believed to be associated with the Morayfield chapter, with police seizing an estimated \\$1.6 million worth of steroids and performance-enhancing drugs.\n    *   Also in 2014, police raids in Western Australia resulted in the seizure of methamphetamine and cash, and the arrest of the Perth Lone Wolf President and Sergeant At Arms on drug and stolen property charges.\n    *   In 2023, a senior Lone Wolf bikie and associates were charged with serious drug and firearms offenses in Western Australia, seizing cocaine, methamphetamine, steroids, a firearm, ammunition, and a pill press.\n*   **Rivalries:** A \"war\" reportedly erupted between the Lone Wolf MC and the Rebels MC during the second half of 2014.\n*   **Name Note:** It is important to distinguish the outlaw club from the generic term \"lone wolf,\" which refers to an individual biker who rides alone and is not associated with a club. There are also separate, unrelated riding groups in Canada and Atlanta called \"Lone Wolf Motorcycle Club\".","sources":["https:\/\/onepercenterbikers.com\/lone-wolf-mc-motorcycle-club\/","https:\/\/en.wikipedia.org\/wiki\/Outlaw_motorcycle_club","https:\/\/thewest.com.au\/news\/bikies\/lone-wolf-bikie-gang-gang-crime-squad-suppress-efforts-to-recruit-expand-membership--c-10926422","https:\/\/www.vikingbags.com\/blogs\/news\/what-does-it-mean-to-be-a-lone-wolf-in-the-biker-community","https:\/\/www.google.com\/search?q=Lone+Wolf+outlaw+motorcycle+club+history+and+structure&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=lone+wolf+biker+gang+details&client=app-vertex-grounding&safesearch=active"]}]}