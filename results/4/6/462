{"s":"Gemini","m":"gemini-flash-latest","t":1761468810,"r":[{"role":"u","text":"so who runs ascension exactly"},{"role":"a","text":"The operations of *WoW: Ascension* are run by a development team led by a person known by the pseudonym **Dutch**.\n\n*   **Lead Operator:** **Dutch** is widely recognized as the lead or head of the *Project Ascension* development team and its primary spokesperson, often making announcements, providing updates, and answering community questions, especially regarding the status of the server and its various realms (like Bronzebeard or the absorption of Project Epoch).\n*   **Anonymity:** Consistent with the broader private server community, the individuals running the operation, including \"Dutch\" and the rest of the development team, use pseudonyms. Their full, legal names and precise geographical locations are generally not publicly known.\n*   **Geographical Speculation:** The identity of the operators is protected to mitigate legal risk. There is speculation among the community that the team is primarily **EU-based** (potentially indicated by the pseudonym \"Dutch\"), which would significantly complicate any legal action or Cease and Desist enforcement attempted by a US-based company like Blizzard.","sources":["https:\/\/www.reddit.com\/r\/wowservers\/comments\/1mp0lic\/dutch_ascension_lead_posted_this_last_night_about\/","https:\/\/www.reddit.com\/r\/Project_Epoch\/comments\/1nxqscx\/and_you_still_think_dutch_is_going_to_give_up\/","https:\/\/www.google.com\/search?q=Project+Ascension+team+names&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=WoW:+Ascension+%22Dutch%22+leader&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"can i enable free pick on an existing char in ascension!"},{"role":"a","text":"In *WoW: Ascension*, \"Free Pick\" is a **realm type\/game mode**, not a feature you can toggle on an existing character that was created on a different mode.\n\nHere is the breakdown:\n\n1.  **Free Pick Realm (Area 52):**\n    *   **\"Free Pick\"** is the primary system on a specific server, currently **Area 52**.\n    *   On a Free Pick realm, you can freely choose all your abilities and talents as you level up, without the randomness of the \"Wildcard\" or \"Draft\" systems found on the seasonal servers (like Elune).\n\n2.  **Enabling Free Pick on an Existing Character:**\n    *   You **cannot convert** a character from the \"Wildcard\" (random roll\/RNG) realm to a \"Free Pick\" character on the Free Pick realm. They are separate game modes on separate realms.\n\n3.  **The closest thing you can do on an existing Wildcard\/RNG character is a full **Respec\/Reroll**:**\n    *   On the Wildcard\/RNG realms (like Elune), you receive abilities randomly as you level, but the game provides systems to overcome the RNG.\n    *   At max level (or even while leveling), you can obtain and use **Scrolls of Fortune** (or similar reroll items\/services) to reroll specific abilities or talents until you get the ones you want. This allows you to *steer* your build into a specific \"class\" or specification, effectively turning it into a custom-built character, but it is **not** the same as the \"Free Pick\" mode where you choose everything from the start.\n    *   A max-level Wildcard character that has been heavily refined through rerolls can eventually become a powerful, custom-designed build, similar in outcome to a Free Pick character, but the process is different.","sources":["https:\/\/www.reddit.com\/r\/wowservers\/comments\/15e3jxr\/so_am_starting_on_ascension_and_can_you_guys\/","https:\/\/www.youtube.com\/watch?v=AmVHhSkr3kQ","https:\/\/www.youtube.com\/watch?v=y67CL6v7E-8","https:\/\/www.youtube.com\/watch?v=hZhMf2Jpuu8","https:\/\/www.youtube.com\/watch?v=R1qgm5DLgzQ","https:\/\/www.youtube.com\/watch?v=1qXScmH7BW0","https:\/\/www.youtube.com\/watch?v=dQ-37uHZaFk","https:\/\/www.google.com\/search?q=WoW+Ascension+enable+Free+Pick+on+existing+character&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=WoW+Ascension+Free+Pick+system+explained&client=app-vertex-grounding&safesearch=active"]}]}