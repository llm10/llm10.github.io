{"s":"Gemini","m":"gemini-flash-latest","t":1761470000,"r":[{"role":"u","text":"can i enable free pick on an existing char in ascension!"},{"role":"a","text":"In *WoW: Ascension*, \"Free Pick\" is a **realm type\/game mode**, not a feature you can toggle on an existing character that was created on a different mode.\n\nHere is the breakdown:\n\n1.  **Free Pick Realm (Area 52):**\n    *   **\"Free Pick\"** is the primary system on a specific server, currently **Area 52**.\n    *   On a Free Pick realm, you can freely choose all your abilities and talents as you level up, without the randomness of the \"Wildcard\" or \"Draft\" systems found on the seasonal servers (like Elune).\n\n2.  **Enabling Free Pick on an Existing Character:**\n    *   You **cannot convert** a character from the \"Wildcard\" (random roll\/RNG) realm to a \"Free Pick\" character on the Free Pick realm. They are separate game modes on separate realms.\n\n3.  **The closest thing you can do on an existing Wildcard\/RNG character is a full **Respec\/Reroll**:**\n    *   On the Wildcard\/RNG realms (like Elune), you receive abilities randomly as you level, but the game provides systems to overcome the RNG.\n    *   At max level (or even while leveling), you can obtain and use **Scrolls of Fortune** (or similar reroll items\/services) to reroll specific abilities or talents until you get the ones you want. This allows you to *steer* your build into a specific \"class\" or specification, effectively turning it into a custom-built character, but it is **not** the same as the \"Free Pick\" mode where you choose everything from the start.\n    *   A max-level Wildcard character that has been heavily refined through rerolls can eventually become a powerful, custom-designed build, similar in outcome to a Free Pick character, but the process is different.","sources":["https:\/\/www.reddit.com\/r\/wowservers\/comments\/15e3jxr\/so_am_starting_on_ascension_and_can_you_guys\/","https:\/\/www.youtube.com\/watch?v=AmVHhSkr3kQ","https:\/\/www.youtube.com\/watch?v=y67CL6v7E-8","https:\/\/www.youtube.com\/watch?v=hZhMf2Jpuu8","https:\/\/www.youtube.com\/watch?v=R1qgm5DLgzQ","https:\/\/www.youtube.com\/watch?v=1qXScmH7BW0","https:\/\/www.youtube.com\/watch?v=dQ-37uHZaFk","https:\/\/www.google.com\/search?q=WoW+Ascension+enable+Free+Pick+on+existing+character&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=WoW+Ascension+Free+Pick+system+explained&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"can i disable \"build draft\" mode on an existing char in ascension"},{"role":"a","text":"The ability to \"disable\" Build Draft mode on an existing character in *WoW: Ascension* depends on how you look at the different modes:\n\n1.  **If your character is on a Draft-focused realm (like Thrall or a Seasonal realm with Draft as the primary mode):**\n    *   You **cannot disable the mode** to make it a *Free Pick* character. The realm's core ruleset is what dictates the draft system. You cannot convert a character from a Draft server to a Free Pick server (like Area 52).\n    *   **However, you can achieve a Free-Pick-like outcome at max level.** In Draft mode, characters get their abilities randomly (or by picking 1 of 3 every two levels). The system is designed for you to refine your build after hitting max level through methods like:\n        *   **Rerolls:** Using **Hands of Fate** or similar items\/services (like **Scrolls of Fortune** on other modes) to randomly reroll unwanted abilities or talents until you get the ones you desire.\n        *   **Prestige:** This lets you reset your Hero to level 1 and draft a completely new build while keeping your accumulated **Skill Cards**. Skill Cards are powerful items that guarantee specific abilities or talents for your next draft, allowing you to choose the foundation of your new build.\n        *   **Build Draft Exit (Specific Feature):** Some announcements indicate that on certain realms, you can exit the Build Draft at max level to customize the build, and this no longer affects your Mystic Enchantments, allowing you to fine-tune the build.\n\n2.  **If your character is a Free Pick character who used the Build Draft *Option* (on a Free Pick realm like Area 52):**\n    *   Build Draft has been introduced as an *option* on Free Pick realms like Area 52, which gives you a full, complete pre-set build to start with.\n    *   A Free Pick character that used this Archetype or Build Draft option can **completely reset their abilities and talents** at any time using the Character Advancement interface. This returns your spent resources (Ability Essences and Talent Essences), allowing you to freely pick any spell and talent, which is the definition of \"Free Pick\" mode. In this case, you are effectively \"disabling\" the pre-set Draft build and reverting to full Free Pick freedom.","sources":["https:\/\/ascension.gg\/en\/news\/mastering-draft-mode\/368","https:\/\/www.youtube.com\/watch?v=BYs3IlnD7iU","https:\/\/www.youtube.com\/watch?v=1qXScmH7BW0","https:\/\/www.youtube.com\/watch?v=d5mtwTwpvfQ","https:\/\/ascension.gg\/cz\/news\/season-8-chapter-3-complete-overview\/428","https:\/\/www.youtube.com\/watch?v=4DhWvPTi5Jo","https:\/\/www.youtube.com\/watch?v=R1qgm5DLgzQ","https:\/\/www.google.com\/search?q=WoW+Ascension+convert+Draft+character+to+Free+Pick&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=WoW+Ascension+disable+build+draft+on+existing+character&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=WoW+Ascension+Build+Draft+mode+realms&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"ascension wow linux installation"},{"role":"a","text":"Installing *WoW: Ascension* on Linux primarily involves using a compatibility layer like **Wine** or a specialized gaming tool like **Lutris** or **Steam's Proton** to run the Windows-based client.\n\nHere is a general, uncensored, and unfiltered guide, focusing on the most common and successful methods:\n\n### Method 1: Using Lutris (Recommended for Ease of Use)\n\nLutris is a gaming platform that manages Wine prefixes and installation scripts, often making the process much smoother.\n\n1.  **Install Lutris:**\n    *   Install Lutris using your distribution's package manager (e.g., `sudo apt install lutris` on Ubuntu\/Debian, `sudo dnf install lutris` on Fedora, etc.).\n\n2.  **Install Battle.net (or the Official Ascension Launcher):**\n    *   **Option A (Recommended for updates):** Install the official Battle.net client through Lutris. Search for \"Battle.net\" in the Lutris application and use the installation script.\n    *   **Option B (Direct Client):** Search for a community-made *Ascension* script in Lutris, or download the *Ascension* launcher (if available) and use the Lutris \"Add Game\" function to point it to the executable, configuring it to use a recent version of Wine.\n\n3.  **Install *Ascension*:**\n    *   If you used **Option A**, launch Battle.net via Lutris. Download and install a legitimate *WoW* 3.3.5a client (sometimes required as a base) and then use the *Ascension* installer\/patcher to convert it.\n    *   If you used the official *Ascension* launcher, run it via Lutris and let it download\/patch the client.\n\n### Method 2: Using Wine Staging\/Custom Wine Prefix\n\nThis method gives you more control but requires a better understanding of Wine.\n\n1.  **Install Wine:**\n    *   Ensure you have a recent version of Wine, ideally **Wine Staging** or **TKG**, as they often have better gaming-related patches. Use your distribution's guide to install the latest version.\n\n2.  **Create a Wine Prefix:**\n    *   Create a dedicated Wine prefix for the game to keep it clean:\n        ```bash\n        export WINEPREFIX=~\/ascension_wow\n        winecfg\n        ```\n    *   In `winecfg`, ensure the Windows version is set to something like **Windows 7** or **Windows 10**.\n\n3.  **Run the Installer\/Launcher:**\n    *   Download the official *Ascension* client launcher or installer from their website.\n    *   Navigate to the directory and run it with your dedicated prefix:\n        ```bash\n        WINEPREFIX=~\/ascension_wow wine \/path\/to\/ascension_launcher.exe\n        ```\n    *   Let the launcher download and install the game files.\n\n4.  **Run the Game:**\n    *   To launch the game, you will typically run the game's executable (often `WoW.exe` in the game folder) through your Wine prefix:\n        ```bash\n        WINEPREFIX=~\/ascension_wow wine ~\/ascension_wow\/drive_c\/Program\\ Files\/Ascension\/WoW.exe\n        ```\n\n### Important Tips for Performance and Stability\n\n*   **DXVK:** You will likely need **DXVK** (DirectX to Vulkan translation layer) to achieve good performance. Lutris usually handles this automatically. If using raw Wine, you need to install it manually into the Wine prefix.\n*   **Winetricks:** Use `winetricks` to install necessary dependencies like `vcrun` or specific DirectX components if the game doesn't launch.\n*   **Performance:** Older versions of *WoW* (like 3.3.5a) generally run very well on Linux via Wine\/Proton, often achieving native-like performance."}]}