{"s":"Gemini","m":"gemini-flash-latest","t":1761490024,"r":[{"role":"u","text":"swtor coop instances"},{"role":"a","text":"The cooperative (co-op) instanced content in *Star Wars: The Old Republic* (SWTOR) is categorized primarily into Flashpoints, Operations, and specific story content.\n\n### Core Co-op Instanced Content\n\n*   **Flashpoints:** These are four-person instances that offer story-driven combat scenarios. They can be queued for using the Group Finder tool or accessed directly at their entrance terminals. They have multiple difficulty modes:\n    *   **Story Mode:** Often soloable with a companion and a temporary droid companion, but can be done with a group.\n    *   **Veteran Mode (Groupfinder):** A four-person group experience with variable difficulty.\n    *   **Master Mode:** The most difficult four-person mode.\n*   **Operations:** These are eight-person instances that serve as the game's raid content, providing challenging boss encounters. They also feature different difficulty levels:\n    *   **Story Mode:** Accessible and less punishing for new groups.\n    *   **Veteran Mode (Hard Mode):** Significantly more challenging with mechanics requiring greater coordination.\n    *   **Master Mode (Nightmare Mode):** The highest difficulty, reserved for highly skilled and coordinated groups.\n*   **Heroic Missions:** Instanced sections within the open world, typically designated for 2 or more players, though many can be soloed at higher levels.\n*   **Uprisings:** Instanced four-person, quick-paced mini-Flashpoints added in later expansions, also available in different difficulties.\n*   **Star Fortresses (Heroic):** Instanced content from the *Knights of the Fallen Empire* expansion that is designed for a group.\n\n### Story and Expansion Co-op\n\nThe main class stories, planetary quests, and expansion storylines (including **Knights of the Fallen Empire (KOTFE)** and **Knights of the Eternal Throne (KOTET)**) can be played cooperatively, but with limitations on story progression.\n\n*   **Class and Planetary Story:** You can group up with a friend and participate in most of your friend's story quests and cutscenes. To progress in their specific **Class Story** quests, the other player must have an option enabled in preferences to allow co-op story instances. In cutscenes, one player will have dialogue control, and the other players will vote on the choice to influence the outcome. If you are not on the same quest, you will be teleported in to assist with combat, but the story progress will only count for the player whose quest it is.\n*   **KOTFE\/KOTET and Later Expansions:** These expansions are heavily focused on a single-player narrative. While you can invite friends to join your story chapters and \"solo\" Flashpoints like Objective Meridian, the progress will only count for the Chapter owner, meaning your group may have to repeat the instance for each player to advance their personal story.\n\n### Co-op Restrictions\n\n*   **Faction:** Co-op is only possible between characters of the same faction (Republic or Empire). Opposite factions cannot group together at all.\n*   **Class Story:** Two players of the *exact same class* (e.g., two Jedi Knights) cannot enter and complete the **Class Story** quest instance together for mutual credit; you must repeat the instance for each player, or one player must choose a different class.\n*   **Early Leveling:** Players choosing different starting planets (e.g., Jedi Knight on Tython and Trooper on Ord Mantell) will not be able to group together until they reach their faction's Fleet station at roughly level 10. The classes that start on the same planet are:\n    *   **Republic:** Jedi Knight and Jedi Consular (Tython); Trooper and Smuggler (Ord Mantell).\n    *   **Empire:** Sith Warrior and Sith Inquisitor (Korriban); Bounty Hunter and Imperial Agent (Hutta).","sources":["https:\/\/swtorista.com\/articles\/playing-swtor-with-a-friend\/","https:\/\/todayintor.com\/2023\/05\/26\/story-as-group-swtor\/","https:\/\/www.reddit.com\/r\/swtor\/comments\/1bl82qg\/best_way_to_play_coop\/","https:\/\/www.reddit.com\/r\/swtor\/comments\/xdzfiu\/is_there_any_decent_coop_content_in_the_expansions\/","https:\/\/www.google.com\/search?q=SWTOR+coop+instances&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=SWTOR+cooperative+gameplay+content&client=app-vertex-grounding&safesearch=active"]}]}