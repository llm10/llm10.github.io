{"s":"Gemini","m":"gemini-flash-latest","t":1761671432,"r":[{"role":"u","text":"full details of cassiar gold corp"},{"role":"a","text":"**Cassiar Gold Corp (TSX-V: GLDC; OTCQX: CGLCF; FRA: 756) - Full Details**\n\nCassiar Gold Corp. is a Canadian gold exploration company focused on developing its district-scale gold projects in British Columbia, Canada. It holds a 100% interest in its two primary gold properties. The company was founded in 2009 and is headquartered in Vancouver.\n\n### **Corporate and Financial Overview**\n\n*   **Type:** Canadian Gold Exploration Company.\n*   **Founded:** 2009.\n*   **Headquarters:** Vancouver, British Columbia, Canada.\n*   **Management:**\n    *   President and Chief Executive Officer (CEO): Marco Roque.\n    *   Chief Financial Officer (CFO): Michale Wood.\n    *   Chairman of the Board: Stephen J.J. Letwin.\n*   **Employees:** 7.00.\n*   **Stock Listings (Symbols):** TSX Venture Exchange (GLDC), OTCQX International (CGLCF), and Frankfurt Stock Exchange (756).\n*   **Financial Snapshots (Selected Historical Data):**\n    *   Revenue (Trailing Twelve Months, TTM): \\$0.00 CAD.\n    *   Net Income (TTM): -\\$10.90M CAD.\n    *   Cash\/Debt (As of 04\/04\/2025): Approximately \\$C2.5M cash and no debt.\n    *   Market Capitalization (As of September 2025): Approximately \\$CAD 50\u201360 million, noted to be trading at a significant discount to its in-situ metal value.\n\n### **Key Projects**\n\nThe company's strategy is centered on unlocking a multi-million-ounce gold district with an ultimate goal of being acquired by a major gold producer (M&A exit).\n\n#### **1. Cassiar Gold Property (Flagship)**\n\nThis 100%-owned flagship property is located in the Cassiar Mining District of northern British Columbia, spanning approximately 590 square kilometers. It is an orogenic gold project with two main focus areas:\n\n**A. Cassiar North (Bulk-Tonnage Focus):**\n*   **Main Asset:** **Taurus Deposit**, which hosts the primary resource estimate.\n*   **NI 43-101 Resource Estimate (June 2025 effective date):**\n    *   **Indicated:** 0.4 Million ounces (Moz) of gold at 1.43 g\/t gold.\n    *   **Inferred:** 1.93 Moz of gold at 0.95 g\/t gold.\n    *   **Total Resource:** 2.34 Moz of gold.\n*   **Exploration:** Mineralization starts from surface, indicating potential for a low-strip-ratio open-pit mine. Ongoing drilling focuses on lateral and depth expansion.\n*   **Other Prospects:** Includes bulk-tonnage style regional targets like Wings Canyon, Snow Creek, and Newcoast prospects.\n\n**B. Cassiar South (High-Grade Vein Focus):**\n*   **Mineralization:** Hosts numerous high-grade epizonal quartz gold vein systems.\n*   **Historical Workings:** Includes about 25 km of historical underground workings.\n*   **Past Production:** Estimated to be over 350,000 ounces of gold, mostly from high-grade quartz veins grading between 10\u201320 g\/t gold. Past operations (e.g., Main Mine, 1979-1988) produced gold grading up to 17.14 g\/t Au.\n*   **Potential:** High-grade veins are seen as a potential source for early cash flow via selective mining.\n\n**C. Infrastructure:**\n*   The property is accessible via Highway 37.\n*   It includes a **fully owned and permitted 300 tonne per day (tpd) mill** (last in production in 2007).\n*   The site benefits from established mine permits, permanent camp, and access to power.\n\n#### **2. Sheep Creek Gold Project**\n\n*   **Location:** Southern British Columbia, near Salmo, covering most of the Sheep Creek gold camp.\n*   **Status:** An underexplored orogenic gold project.\n*   **Historical Production:** The Sheep Creek Mining District is the third largest past-producing orogenic gold district in BC. Historical production (1900-1951) was estimated at 742,000 oz gold at an average grade of 14.7 g\/t gold.","sources":["https:\/\/markets.ft.com\/data\/equities\/tearsheet\/profile?s=GLDC:CVE","https:\/\/www.moomoo.com\/stock\/CGLCF-US\/company","https:\/\/www.marketscreener.com\/quote\/stock\/CASSIAR-GOLD-CORP-49479189\/company\/","https:\/\/cassiargold.com\/about\/","https:\/\/www.goldstockdata.com\/company\/889-Cassiar-Gold-Corp.html","https:\/\/simplywall.st\/community\/narratives\/ca\/materials\/tsxv-gldc\/cassiar-gold-shares\/40atl2hx-update-for-cassiar-gold","https:\/\/www.cruxinvestor.com\/posts\/cassiar-gold---building-a-multi-million-ounce-gold-district-in-british-columbia","https:\/\/www.intelligentinvestor.com.au\/shares\/tsx-gldc\/cassiar-gold-corp\/research","https:\/\/cassiargold.com\/","https:\/\/www.google.com\/search?q=Cassiar+Gold+Corp+full+details&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=Cassiar+Gold+Corp+projects+and+financial+status&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"what is in-situ metal value"},{"role":"a","text":"The term **in-situ metal value** (often referred to simply as **in-situ value**) in the mining and exploration industry is a fundamental valuation method that provides a theoretical gross worth of a mineral deposit.\n\nIt is defined as the total value of all the mineral resources (Measured, Indicated, and Inferred) a mining company owns, calculated at the current or a fixed spot price, **before** any mining, processing, or operating costs are factored in.\n\nThe phrase \"in-situ\" is Latin for \"in place\" or \"in position,\" meaning the value of the metal *as it sits in the ground*.\n\n### **How In-Situ Metal Value is Calculated**\n\nThe calculation is a straightforward two-step process:\n\n1.  **Calculate the Total Metal Content (Tonnage of Metal):**\n    *   This is done by multiplying the **tonnage** (amount of rock\/ore) in the mineral resource estimate by the **average grade** (concentration) of the metal in that rock.\n    *   *Formula (simplified):* **Tonnage of Metal** = Total Tonnes of Ore $\\times$ Average Grade (e.g., grams of gold per tonne).\n\n2.  **Calculate the Gross Value (In-Situ Value):**\n    *   The total metal content is multiplied by the chosen **market price** of the metal.\n    *   *Formula (simplified):* **In-Situ Metal Value** = Total Ounces\/Pounds of Metal $\\times$ Current Spot Price of the Metal.\n\n### **Purpose and Limitations as a Valuation Tool**\n\nThe primary purpose of calculating in-situ metal value is to provide a quick, comparative, and unburdened measure of the raw wealth contained within a company's projects.\n\n**Purpose:**\n*   **Comparison:** It allows investors and analysts to compare the fundamental asset base (the metal in the ground) of different exploration and development-stage companies.\n*   **Acquisition Target:** In-situ value is often used by major producers to establish an initial benchmark for the worth of a property in a potential merger or acquisition (M&A) scenario. The ratio of a company's Market Capitalization to its In-Situ Value is a key metric.\n\n**Limitations (Why it is *not* a true value):**\nThe in-situ value represents a **gross revenue estimate** and is considered a preliminary or flawed valuation method because it makes no adjustment for the economic reality of mining.\n\nIt ignores critical factors that determine a project's actual profitability:\n*   **Mining Costs:** The substantial costs associated with drilling, blasting, hauling, and moving the ore.\n*   **Processing Costs:** The costs of crushing, grinding, and chemically extracting the metal from the ore.\n*   **Metallurgical Recovery:** The fact that not 100% of the metal in the ground can be physically recovered (e.g., a gold mine might only recover 90-95%).\n*   **Royalties, Taxes, and Infrastructure Costs:** All other costs required to bring the metal to market.\n*   **Economic Viability (Cut-off Grade):** The in-situ value includes all Measured, Indicated, and Inferred resources, even those that may be too low-grade to be *economically* profitable to extract (i.e., below a realistic cut-off grade).\n\nFor a more accurate valuation, a company or analyst must conduct an economic study (like a Preliminary Economic Assessment, Pre-Feasibility Study, or Feasibility Study) to arrive at a **Net Present Value (NPV)**, which discounts the projected cash flows after accounting for all costs.","sources":["https:\/\/www.google.com\/search?q=how+to+calculate+in-situ+metal+value&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=in-situ+metal+value+mining+definition&client=app-vertex-grounding&safesearch=active"]}]}