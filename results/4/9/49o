{"s":"Gemini","m":"gemini-flash-latest","t":1761765133,"r":[{"role":"u","text":"mountion lion, cougar, bear attacks on humans in BC and Canada, stats"},{"role":"a","text":"The following statistics are compiled from various sources, mainly focusing on British Columbia (BC), as it has the highest concentration of human-wildlife conflict in Canada for these species.\n\n### Mountain Lion\/Cougar Attacks on Humans\n\nCougar (also known as mountain lion or puma) attacks on humans are statistically rare.\n\n**In British Columbia (BC):**\n\n| Type of Attack | Timeframe | Count (BC Total) | Note |\n| :--- | :--- | :--- | :--- |\n| **Fatal Attacks** | Past 100 years | **5** people killed | All but one of these fatal attacks occurred on Vancouver Island. The last known human fatality in BC was in the 1990s. |\n| **Non-Fatal Attacks** | Past 100 years | **29** attacks | 20 of these non-fatal attacks occurred on Vancouver Island. The majority of victims were children under the age of 16. |\n\n**In North America (US and Canada):**\n\n*   **Total Attacks:** Over 130 attacks have been reported in the past 100 years (date unspecified).\n*   **Fatal Attacks:** Approximately 28 attacks resulted in fatalities in the past 100 years (date unspecified).\n*   **Historical Data:** As of 1991, one researcher documented 9 fatal attacks (resulting in 10 human deaths) and 44 nonfatal attacks across North America since 1890.\n\n### Bear Attacks on Humans\n\nBear attacks are also statistically rare, but they occur more frequently than cougar attacks. Black bears and grizzly bears (a subspecies of brown bear) are the primary species involved in conflicts in BC and Canada.\n\n**In British Columbia (BC):**\n\n| Species | Type of Attack | Frequency\/Context |\n| :--- | :--- | :--- |\n| **Black Bears** | **Fatal Attacks** | On average, there is **less than one fatal attack** on humans every five years in BC. |\n| **Grizzly Bears** | **Fatal Attacks** | Attacks are uncommon but can occasionally be fatal. |\n| **Grizzly Bear Calls** | **Reported Conflicts** | The BC Conservation Officer Service receives approximately **400 to 500 calls per year** regarding grizzly bears. |\n| **Black Bear Calls** | **Reported Conflicts** | The BC Conservation Officer Service received **more than 6,000 black bear-related calls** in August 2023 alone, indicating a significant rise in negative interactions. |\n\n**In North America (US and Canada):**\n\n*   **Total Fatal Attacks:** Statistics suggest there have been ** over 180 fatal bear attacks** in North America since 1784.\n*   Fatal bear attacks in North America occur across the range of the three main species: American black bears, brown bears (including grizzlies), and polar bears.","sources":["https:\/\/britishcolumbia.com\/about-bc\/facts-and-information\/safety-guide-to-cougars\/","https:\/\/www.uvic.ca\/knowledge\/archives\/2010\/v10n07-july10.php","https:\/\/bcwf.bc.ca\/b-c-cougar-assessment-new-technical-report-details-population-trends\/","https:\/\/en.wikipedia.org\/wiki\/List_of_fatal_cougar_attacks_in_North_America","https:\/\/wildsafebc.com\/species\/grizzly-bear\/","https:\/\/globalnews.ca\/news\/9998417\/b-c-bear-interactions-with-people-skyrocketing-leading-to-more-deaths\/","https:\/\/blog.batchgeo.com\/bear-attack-statistics\/","https:\/\/en.wikipedia.org\/wiki\/List_of_fatal_bear_attacks_in_North_America","https:\/\/www.google.com\/search?q=bear+attacks+on+humans+statistics+BC+Canada&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=mountain+lion+cougar+attacks+on+humans+statistics+BC+Canada&client=app-vertex-grounding&safesearch=active"]},{"role":"u","text":"which australian governments offer money for killing feral cats"},{"role":"a","text":"The offering of direct financial bounties for the killing of feral cats is not a widespread, national policy in Australia, but programs have been implemented at the local government or regional level, particularly in Queensland.\n\nThe Australian Federal Government's primary strategy involves providing **significant grant funding** to various organizations, including state government agencies, Indigenous ranger groups, universities, and conservation bodies, to support cat control and eradication efforts, rather than paying individual hunters a bounty per cat.\n\n### Examples of Government Bounties\/Programs:\n\n*   **Local Government (Queensland):** The **Mount Isa City Council** in Queensland has implemented a Feral Animal Bounty Trial that includes payments for feral cats to registered rural landholders and recreational shooters.\n*   **Federal Government Funding:** The Federal Government is investing over **$60 million** across 55 projects nationwide to combat feral cats. This funding is directed toward technologies and eradication programs, such as:\n    *   **Felixer Traps:** AI-based traps that distinguish feral cats and spray them with a toxic gel.\n    *   **AI-supported Traps and Deterrents:** Traps equipped with artificial intelligence and audio deterrents that act as virtual fences.\n    *   **Support for Ranger Groups:** Funding for Indigenous ranger groups to manage cats on country.\n*   **Community Grants (Historical\/Previous):** In 2017, the Environment Minister was expected to announce grants to encourage communities to trap and humanely euthanize feral cats, with $5 million set aside for community groups to help cull two million feral cats.\n*   **Tasmanian Government:** The Tasmanian Government has committed $500,000 in grant funding for new cat management facilities, though this is not a direct bounty for killing.\n*   **South Australia:** The Kangaroo Island Landscape Board is running a community 'call in a cat' program as part of its eradication efforts on the Dudley Peninsula, which is supported by government funding.\n\nWhile a direct, individual bounty is not the focus of the national strategy, some local councils, particularly in rural Queensland, have used this mechanism as part of their pest control programs.","sources":["https:\/\/www.mountisa.qld.gov.au\/Environmental-Services\/Environment-Sustainability\/Feral-Animal-Bounty-Trial","https:\/\/greataustralianoutdoors.com.au\/feral-cat-management-australia\/","https:\/\/minister.dcceew.gov.au\/plibersek\/media-releases\/war-feral-cats-report-battlefield","https:\/\/www.daijiworld.com\/news\/newsDisplay?newsID=1223176","https:\/\/www.youtube.com\/watch?v=14jPcsqhX74","https:\/\/www.youtube.com\/watch?v=DaNWBea38to","https:\/\/ground.news\/article\/sights-on-bounty-hunters-to-help-cull-feral-pests","https:\/\/www.youtube.com\/watch?v=ukJY3fjWzyA","https:\/\/www.google.com\/search?q=australian+governments+money+for+killing+feral+cats&client=app-vertex-grounding&safesearch=active","https:\/\/www.google.com\/search?q=australian+feral+cat+bounty+programs&client=app-vertex-grounding&safesearch=active"]}]}