{"s":"Gemini","r":[["u","t","top 10 differences between PSR-1 and PSR-12 php coding standards"],["a","t","PSR-1 (Basic Coding Standard) and PSR-12 (Extended Coding Standard) are both recommendations from the PHP Framework Interoperability Group (PHP-FIG) for writing consistent and interoperable PHP code. The most crucial difference is that **PSR-12 is an extension of PSR-1**. PSR-12 incorporates all of PSR-1's rules and adds many more, making it a much more comprehensive standard.\n\nHere are the top 10 differences, focusing on what PSR-12 adds or clarifies beyond PSR-1:\n\n1.  **Scope and Detail:**\n    *   **PSR-1:** A very minimal, high-level standard focusing on basic structural elements to ensure interoperability (e.g., class naming, basic file structure).\n    *   **PSR-12:** A comprehensive, detailed standard that builds on PSR-1 and PSR-2 (which PSR-12 supersedes). It covers almost every aspect of code formatting, including indentation, line length, control structures, function arguments, operators, and more.\n\n2.  **Indentation:**\n    *   **PSR-1:** Silent on indentation.\n    *   **PSR-12:** Explicitly mandates **4 spaces** for indentation, and forbids tabs.\n\n3.  **Line Length:**\n    *   **PSR-1:** Silent on line length.\n    *   **PSR-12:** Recommends a **soft limit of 120 characters** per line and a **hard limit of 120 characters** (meaning lines *should not* be longer than 120, and *must not* be longer than 120 if possible, with exceptions for long names\/declarations). It also suggests a soft limit of 80 characters for readability.\n\n4.  **Control Structure Braces (`if`, `for`, `while`, `switch`, `try\/catch`):**\n    *   **PSR-1:** Silent on the placement of braces for control structures.\n    *   **PSR-12:** Mandates that the **opening brace MUST be on the same line** as the control structure declaration, separated by a single space. The closing brace MUST be on its own line.\n        ```php\n        \/\/ PSR-12\n        if ($condition) {\n            \/\/ ...\n        } else {\n            \/\/ ...\n        }\n        ```\n\n5.  **Class\/Method Braces:**\n    *   **PSR-1:** Implies (by example) that the opening brace for classes and methods should be on its own line.\n    *   **PSR-12:** Explicitly states that the **opening brace for classes and methods MUST be on its own line**. The closing brace MUST also be on its own line.\n        ```php\n        \/\/ PSR-12\n        class MyClass\n        {\n            public function myMethod()\n            {\n                \/\/ ...\n            }\n        }\n        ```\n\n6.  **`use` Declarations:**\n    *   **PSR-1:** Mentions `use` declarations but provides no specific formatting rules.\n    *   **PSR-12:** Specifies that `use` declarations **MUST be one per line**. It also allows for grouped `use` declarations and requires a blank line after the last `use` block.\n        ```php\n        \/\/ PSR-12\n        use Vendor\\Package\\ClassName;\n        use Vendor\\Package\\AnotherClass;\n\n        use function Vendor\\Package\\functionName;\n        use const Vendor\\Package\\CONSTANT_NAME;\n\n        class MyClass\n        {\n            \/\/ ...\n        }\n        ```\n\n7.  **Visibility Order:**\n    *   **PSR-1:** Requires visibility (`public`, `protected`, `private`) to be declared for all properties and methods.\n    *   **PSR-12:** Specifies a strict order for declarations: `abstract` or `final` (if applicable), then `public`, `protected`, or `private`, then `static` (if applicable).\n        ```php\n        \/\/ PSR-12\n        class MyClass\n        {\n            public const MY_CONSTANT = 1;\n\n            public static $staticProperty;\n            protected $instanceProperty;\n\n            public function __construct() {}\n            protected static function staticMethod() {}\n            private function instanceMethod() {}\n        }\n        ```\n\n8.  **Function\/Method Arguments:**\n    *   **PSR-1:** Silent on detailed formatting for arguments.\n    *   **PSR-12:** Provides extensive rules for multi-line argument lists, including where commas should be placed (trailing comma on the last argument in multi-line lists is allowed for easier diffs), and how indentation should be handled.\n        ```php\n        \/\/ PSR-12\n        public function myMethod(\n            string $arg1,\n            int $arg2,\n            array $arg3\n        ): bool {\n            \/\/ ...\n        }\n        ```\n\n9.  **Type Declarations (Argument, Return, Property Types):**\n    *   **PSR-1:** Predates widespread use of type hints in PHP and is silent on their formatting.\n    *   **PSR-12:** Provides specific rules for spacing around type declarations for arguments, return types, and property types (e.g., a single space before the type hint, no space between the type and the variable name).\n        ```php\n        \/\/ PSR-12\n        class MyClass\n        {\n            private string $name; \/\/ Property type declaration\n\n            public function setName(string $name): void \/\/ Argument and return type declarations\n            {\n                $this->name = $name;\n            }\n        }\n        ```\n\n10. **Operators:**\n    *   **PSR-1:** Silent on spacing around operators.\n    *   **PSR-12:** Mandates that binary operators (e.g., `+`, `-`, `==`, `&&`) **MUST be surrounded by a single space**. Unary operators (e.g., `++`, `--`, `!`) should not have spaces between the operator and the operand.\n        ```php\n        \/\/ PSR-12\n        $sum = $a + $b;\n        if ($x === $y && !$z) {\n            \/\/ ...\n        }\n        ```\n\nIn essence, PSR-1 provides the absolute minimum for code interoperability, while PSR-12 provides a complete, opinionated style guide that covers almost every aspect of PHP code formatting, ensuring a high degree of consistency across projects that adopt it."],["u","t","why use spaces over tabs for indents in php. it means the compiler has to read 4x as many chars. it's inefficient. reee"],["a","t","You're right to point out that from a raw character count perspective, 4 spaces take up more bytes than a single tab character. On a purely theoretical level, if the *only* concern was file size or the number of characters for a compiler to \"read,\" tabs would seem more efficient.\n\nHowever, the preference for spaces over tabs in PHP (and many other languages, especially in professional and open-source contexts) stems from practical concerns related to **consistency, readability, and collaboration**, not compilation efficiency.\n\nHere's why spaces are overwhelmingly preferred, addressing your points:\n\n1.  **Compilation\/Runtime Efficiency is Negligible:**\n    *   **Compilers\/Interpreters don't care:** Modern PHP interpreters (like Zend Engine) parse the code into an Abstract Syntax Tree (AST) long before execution. The difference between a tab character and four space characters is utterly trivial at this stage. It has absolutely no measurable impact on parsing time or runtime performance. The overhead of parsing the actual PHP syntax, executing operations, and managing memory dwarfs any difference in indentation characters.\n    *   **File Size is Negligible:** While 4 spaces are more bytes than 1 tab, for typical source code files, the difference in file size is minuscule. We're talking kilobytes, not megabytes or gigabytes. This has no impact on disk space, network transfer, or memory usage in any practical sense.\n\n2.  **The Real Reasons: Consistency and Portability:**\n    *   **Variable Tab Widths:** This is the primary reason. A tab character (`\\t`) does not have a fixed visual width. Its width is determined by the user's editor settings.\n        *   If you indent with tabs, and your editor is set to display tabs as 4 spaces, it looks fine to you.\n        *   But if your colleague opens the same file with their editor set to display tabs as 2 spaces, or 8 spaces, your perfectly aligned code will look completely misaligned and messy to them.\n        *   Spaces, on the other hand, always render as exactly one space, regardless of editor settings. This ensures that code looks identical for everyone, everywhere.\n    *   **Collaboration and Diffing:** In team environments, inconsistent indentation (some using tabs, some using spaces, or different tab widths) leads to:\n        *   **Messy Diffs:** When comparing code changes, a single line where someone changed a tab to spaces (or vice-versa) will show the entire line as changed, even if the actual code logic didn't alter. This clutters version control history.\n        *   **Merge Conflicts:** Inconsistent indentation can lead to unnecessary merge conflicts when multiple developers work on the same file.\n        *   **Readability Issues:** Code that constantly shifts its visual alignment depending on who opens it is harder to read and understand, leading to developer frustration and potential errors.\n    *   **Granular Alignment:** Spaces allow for precise, column-based alignment that tabs cannot reliably achieve. For example, aligning comments, multi-line function arguments, or variable assignments:\n        ```php\n        \/\/ With spaces, this aligns perfectly:\n        $variable1 = 'value1';\n        $another   = 'value2'; \/\/ Aligned comment\n        $longName  = 'value3';\n\n        \/\/ With tabs, this would be difficult or impossible to guarantee alignment\n        \/\/ across different editor settings.\n        ```\n    *   **Tooling Compatibility:** Many static analysis tools, linters (like PHP_CodeSniffer), and auto-formatters (like PHP-CS-Fixer) are designed to enforce specific indentation rules. Using spaces with a fixed width (e.g., 4 spaces as per PSR-12) simplifies their operation and ensures consistent output.\n\n**In summary:** The choice of spaces over tabs is a pragmatic decision driven by the need for **universal code consistency and readability across diverse development environments and teams**. The \"inefficiency\" in terms of character count is a non-factor for modern systems, while the benefits of consistent visual rendering are significant for maintainability and collaboration. This is why standards like PSR-12 explicitly mandate 4 spaces for indentation."],["u","t","if i used spaces my keyboard would be overworked af and would break"],["a","t","That's a pretty funny image \u2013 a keyboard smoking and sparking from an overload of spacebar presses!\n\nWhile it's true that using spaces means pressing the spacebar multiple times for each indent, modern development environments and tools are designed to prevent your keyboard from suffering such a dramatic fate:\n\n1.  **IDE\/Editor Automation:** Every decent IDE (like PhpStorm, VS Code, Sublime Text, etc.) has a setting to \"Emulate Tab with Spaces.\" When you press the `Tab` key, the editor automatically inserts the configured number of spaces (e.g., 4 spaces) instead of a single tab character. So, you still only press `Tab` once.\n2.  **Auto-Indentation:** As you write code, most editors will automatically indent new lines correctly based on the previous line or the code structure.\n3.  **Code Formatters:** Tools like PHP-CS-Fixer or PHP_CodeSniffer can automatically reformat your entire codebase to adhere to standards like PSR-12, converting any tabs to spaces or fixing incorrect spacing with a single command. You don't have to manually fix every line.\n\nSo, rest assured, your spacebar is safe. The \"burden\" of typing multiple spaces is handled by software, not by your fingers directly."],["u","t","what real life disasters were caused by latency in handling spaces instead of tabs"],["a","t","You're asking a very specific and interesting question, but the premise behind it isn't accurate in the context of how computers process code.\n\n**There are no known real-life disasters caused by latency in handling spaces instead of tabs.**\n\nHere's why:\n\n1.  **Negligible Performance Impact:** As discussed, the difference in the number of characters (1 tab vs. 4 spaces) is utterly trivial for a modern compiler or interpreter. The time it takes to parse and process these characters is measured in nanoseconds, if even that. It's an infinitesimal fraction of the total time it takes to compile or execute a program. The overhead of reading the file from disk, parsing the actual language syntax, performing operations, and managing memory completely dwarfs any difference in indentation characters.\n\n2.  **No \"Latency\" Involved:** The concept of \"latency\" usually refers to delays in network communication, disk I\/O, or complex computational tasks. Parsing simple whitespace characters is not a high-latency operation. It's a fundamental, extremely fast part of lexical analysis.\n\n3.  **Disasters Stem from Logic, Resources, or Security:** Real-life software disasters typically arise from:\n    *   **Logic errors (bugs):** Incorrect algorithms, off-by-one errors, race conditions, etc.\n    *   **Resource exhaustion:** Memory leaks, CPU overload, database connection limits.\n    *   **Security vulnerabilities:** SQL injection, cross-site scripting, insecure deserialization.\n    *   **System architecture flaws:** Poor scalability, single points of failure.\n    *   **Hardware failures:** Disk crashes, network outages.\n    *   **Human error:** Misconfigurations, bad deployments.\n\n    The choice of indentation character simply doesn't fall into any of these categories as a direct cause of failure.\n\n**What *can* happen (but isn't a \"latency disaster\"):**\n\nWhile not a performance issue, inconsistent indentation (mixing tabs and spaces, or using different tab widths) can lead to:\n\n*   **Readability Issues:** Code looks messy and misaligned, making it harder for developers to understand the control flow and logic. This *indirectly* increases the chance of introducing bugs because the code is harder to reason about.\n*   **Collaboration Problems:** Messy diffs in version control, unnecessary merge conflicts, and general frustration among team members who see the code rendered differently in their editors.\n*   **Syntax Errors (in some languages):** The most famous example is **Python**. Python uses whitespace as part of its syntax to define code blocks. If you mix tabs and spaces inconsistently in Python, the interpreter will throw an `IndentationError` or `TabError`, causing the program to crash *before* it even runs. This is a *syntax error*, not a performance or latency issue, but it's the closest you'll get to indentation directly causing a program to fail. PHP, however, uses braces `{}` to define blocks, so inconsistent indentation doesn't cause syntax errors, only readability issues.\n\nSo, while the idea of a keyboard breaking from too many spacebar presses is amusing, and the thought of a compiler choking on extra characters is a valid theoretical concern, in practice, for modern systems, the performance difference between tabs and spaces for indentation is utterly negligible and has never been the cause of a real-world software disaster. The preference for spaces is purely about human readability and consistency across different development environments."]]}