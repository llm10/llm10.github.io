{"s":"Gemini","m":"gemini-2.5-flash","t":1750208822,"r":[["u","t","create a python program to create a data uri for an mp4 file and copy it to the clipboard"],["a","t","To create a Python program that generates a data URI for an MP4 file and copies it to the clipboard, you'll need the `pyperclip` library for clipboard access and Python's built-in `base64` module for encoding.\n\nFirst, ensure you have `pyperclip` installed. If not, open your terminal or command prompt and run:\n```bash\npip install pyperclip\n```\n\nHere is the Python code:\n\n```python\nimport base64\nimport pyperclip\nimport os\n\ndef create_mp4_data_uri(file_path):\n    \"\"\"\n    Creates a data URI for an MP4 file.\n\n    Args:\n        file_path (str): The path to the MP4 file.\n\n    Returns:\n        str: The data URI, or None if the file cannot be processed.\n    \"\"\"\n    if not os.path.exists(file_path):\n        print(f\"Error: File not found at '{file_path}'\")\n        return None\n\n    try:\n        with open(file_path, \"rb\") as mp4_file:\n            encoded_string = base64.b64encode(mp4_file.read()).decode('utf-8')\n        \n        data_uri = f\"data:video\/mp4;base64,{encoded_string}\"\n        return data_uri\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\ndef copy_to_clipboard(text):\n    \"\"\"\n    Copies the given text to the system clipboard.\n    \"\"\"\n    try:\n        pyperclip.copy(text)\n        print(\"Data URI copied to clipboard successfully!\")\n    except pyperclip.PyperclipException as e:\n        print(f\"Error copying to clipboard: {e}\")\n        print(\"Pyperclip might not be configured for your system.\")\n        print(\"Please check https:\/\/pyperclip.readthedocs.io\/en\/latest\/ for solutions.\")\n\nif __name__ == \"__main__\":\n    mp4_file_name = \"example.mp4\" # Replace with your MP4 file name\n\n    # Create a dummy MP4 file for demonstration if it doesn't exist\n    if not os.path.exists(mp4_file_name):\n        print(f\"Creating a dummy file '{mp4_file_name}' for demonstration.\")\n        print(\"Please replace it with your actual MP4 file for real use.\")\n        with open(mp4_file_name, \"wb\") as f:\n            f.write(b'\\x00\\x00\\x00\\x18ftypmp42\\x00\\x00\\x00\\x00mp42isom\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00') # A very minimal (invalid) MP4 header\n\n    data_uri = create_mp4_data_uri(mp4_file_name)\n\n    if data_uri:\n        # print(\"Generated Data URI (first 100 chars):\")\n        # print(data_uri[:100] + \"...\")\n        copy_to_clipboard(data_uri)\n    else:\n        print(\"Failed to generate Data URI.\")\n\n```"]]}