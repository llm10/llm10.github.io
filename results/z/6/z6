{"s":"Grok","m":"grok-3-mini","t":1751384351,"r":[["u","t","list all the known books that Hitler and the Nazi's burned"],["a","t","Here is a list of known books and authors whose works were targeted and burned during the Nazi book burnings, primarily in 1933 as part of the campaign against \"un-German\" literature. This is based on historical records, though the exact number of titles burned is estimated in the tens of thousands, and not all are fully documented.\n\n### Authors and Specific Works:\n- **Erich Maria Remarque**: *All Quiet on the Western Front*\n- **Karl Marx and Friedrich Engels**: *The Communist Manifesto*, *Das Kapital*\n- **Sigmund Freud**: *The Interpretation of Dreams*, *Three Essays on the Theory of Sexuality*, and other works\n- **James Joyce**: *Ulysses*\n- **D.H. Lawrence**: *Lady Chatterley's Lover*\n- **Bertolt Brecht**: *The Threepenny Opera*, *Mother Courage and Her Children*, and other plays\n- **Thomas Mann**: *Buddenbrooks*, *The Magic Mountain*\n- **H.G. Wells**: *The Invisible Man*, *The War of the Worlds*, and other novels\n- **Ernest Hemingway**: *A Farewell to Arms*\n- **Franz Kafka**: *The Trial*, *The Metamorphosis*, *The Castle*\n- **Stefan Zweig**: *The World of Yesterday*, and other biographical and historical works\n- **Heinrich Heine**: *Germany: A Winter's Tale*, and poetry collections (notably, his works were burned, and the Nazis ironically quoted his line about book burnings leading to other burnings)\n- **Magnus Hirschfeld**: Works on sexuality and gender, including *The Homosexuality of Men and Women*\n- **Vladimir Lenin**: *The State and Revolution*, and other Marxist texts\n- **Albert Einstein**: Scientific works, including popular science books, though his theoretical physics texts were also targeted\n- **Helen Keller**: *Midstream: My Later Life*, and other writings\n- **John Dos Passos**: *Manhattan Transfer*\n- **\u00c9mile Zola**: *Germinal*, and other novels\n- **Anatole France**: Various works, including *The Revolt of the Angels*\n- **Jack London**: *The Iron Heel*\n- **Upton Sinclair**: *The Jungle*\n- **Theodor Wolff**: Various journalistic and literary works\n- **Various Jewish authors**: Works by Lion Feuchtwanger (*Success*), Arnold Zweig (*The Case of Sergeant Grischa*), and many others\n- **Pacifist and anti-war literature**: Including works by Romain Rolland and others not always specified individually\n- **Communist and socialist texts**: Numerous pamphlets and books by authors like Rosa Luxemburg and Karl Kautsky\n- **Freethinking and atheistic works**: By authors such as Voltaire and others promoting Enlightenment ideas\n\nThis list focuses on prominent examples from the main burnings in cities like Berlin, but it is not exhaustive, as the Nazis also destroyed thousands of books on topics like psychoanalysis, modernism, pacifism, and Jewish culture, including religious texts and scientific publications. Records vary, and some titles were burned in multiple locations."]]}